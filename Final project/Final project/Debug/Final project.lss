
Final project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00001626  000016ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000ee  008000ee  00001748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021b9  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5d  00000000  00000000  00003b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a0  00000000  00000000  000049da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00005d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130b  00000000  00000000  000068c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__ctors_end>
       4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
       8:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
       c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      10:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      14:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      18:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      1c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      20:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      24:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      28:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      2c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      30:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      34:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      38:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      3c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      40:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      44:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      48:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      4c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      50:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      54:	46 07       	cpc	r20, r22
      56:	40 07       	cpc	r20, r16
      58:	42 07       	cpc	r20, r18
      5a:	44 07       	cpc	r20, r20
      5c:	47 07       	cpc	r20, r23
      5e:	47 07       	cpc	r20, r23
      60:	47 07       	cpc	r20, r23
      62:	47 07       	cpc	r20, r23
      64:	47 07       	cpc	r20, r23
      66:	47 07       	cpc	r20, r23
      68:	47 07       	cpc	r20, r23
      6a:	47 07       	cpc	r20, r23
      6c:	47 07       	cpc	r20, r23
      6e:	47 07       	cpc	r20, r23
      70:	47 07       	cpc	r20, r23
      72:	47 07       	cpc	r20, r23
      74:	47 07       	cpc	r20, r23
      76:	47 07       	cpc	r20, r23
      78:	47 07       	cpc	r20, r23
      7a:	47 07       	cpc	r20, r23
      7c:	47 07       	cpc	r20, r23
      7e:	47 07       	cpc	r20, r23
      80:	47 07       	cpc	r20, r23
      82:	47 07       	cpc	r20, r23
      84:	47 07       	cpc	r20, r23
      86:	47 07       	cpc	r20, r23
      88:	47 07       	cpc	r20, r23
      8a:	47 07       	cpc	r20, r23
      8c:	47 07       	cpc	r20, r23
      8e:	47 07       	cpc	r20, r23
      90:	47 07       	cpc	r20, r23
      92:	47 07       	cpc	r20, r23
      94:	46 07       	cpc	r20, r22
      96:	40 07       	cpc	r20, r16
      98:	42 07       	cpc	r20, r18
      9a:	44 07       	cpc	r20, r20
      9c:	57 07       	cpc	r21, r23
      9e:	70 07       	cpc	r23, r16
      a0:	89 07       	cpc	r24, r25
      a2:	a2 07       	cpc	r26, r18
      a4:	ba 07       	cpc	r27, r26
      a6:	ba 07       	cpc	r27, r26
      a8:	ba 07       	cpc	r27, r26
      aa:	ba 07       	cpc	r27, r26
      ac:	ba 07       	cpc	r27, r26
      ae:	ba 07       	cpc	r27, r26
      b0:	ba 07       	cpc	r27, r26
      b2:	ba 07       	cpc	r27, r26
      b4:	ba 07       	cpc	r27, r26
      b6:	ba 07       	cpc	r27, r26
      b8:	ba 07       	cpc	r27, r26
      ba:	ba 07       	cpc	r27, r26
      bc:	ba 07       	cpc	r27, r26
      be:	ba 07       	cpc	r27, r26
      c0:	ba 07       	cpc	r27, r26
      c2:	ba 07       	cpc	r27, r26
      c4:	ba 07       	cpc	r27, r26
      c6:	ba 07       	cpc	r27, r26
      c8:	ba 07       	cpc	r27, r26
      ca:	ba 07       	cpc	r27, r26
      cc:	ba 07       	cpc	r27, r26
      ce:	ba 07       	cpc	r27, r26
      d0:	ba 07       	cpc	r27, r26
      d2:	ba 07       	cpc	r27, r26
      d4:	ba 07       	cpc	r27, r26
      d6:	ba 07       	cpc	r27, r26
      d8:	ba 07       	cpc	r27, r26
      da:	ba 07       	cpc	r27, r26
      dc:	ba 07       	cpc	r27, r26
      de:	ba 07       	cpc	r27, r26
      e0:	ba 07       	cpc	r27, r26
      e2:	ba 07       	cpc	r27, r26
      e4:	ba 07       	cpc	r27, r26
      e6:	ba 07       	cpc	r27, r26
      e8:	ba 07       	cpc	r27, r26
      ea:	ba 07       	cpc	r27, r26
      ec:	ba 07       	cpc	r27, r26
      ee:	ba 07       	cpc	r27, r26
      f0:	ba 07       	cpc	r27, r26
      f2:	ba 07       	cpc	r27, r26
      f4:	ba 07       	cpc	r27, r26
      f6:	ba 07       	cpc	r27, r26
      f8:	ba 07       	cpc	r27, r26
      fa:	ba 07       	cpc	r27, r26
      fc:	ba 07       	cpc	r27, r26
      fe:	ba 07       	cpc	r27, r26
     100:	ba 07       	cpc	r27, r26
     102:	ba 07       	cpc	r27, r26
     104:	ba 07       	cpc	r27, r26
     106:	ba 07       	cpc	r27, r26
     108:	ba 07       	cpc	r27, r26
     10a:	ba 07       	cpc	r27, r26
     10c:	ba 07       	cpc	r27, r26
     10e:	ba 07       	cpc	r27, r26
     110:	ba 07       	cpc	r27, r26
     112:	ba 07       	cpc	r27, r26
     114:	ba 07       	cpc	r27, r26
     116:	ba 07       	cpc	r27, r26
     118:	ba 07       	cpc	r27, r26
     11a:	ba 07       	cpc	r27, r26
     11c:	ba 07       	cpc	r27, r26
     11e:	57 07       	cpc	r21, r23
     120:	70 07       	cpc	r23, r16
     122:	89 07       	cpc	r24, r25
     124:	a2 07       	cpc	r26, r18
     126:	ba 07       	cpc	r27, r26
     128:	ba 07       	cpc	r27, r26
     12a:	ba 07       	cpc	r27, r26
     12c:	ba 07       	cpc	r27, r26
     12e:	ba 07       	cpc	r27, r26
     130:	ba 07       	cpc	r27, r26
     132:	ba 07       	cpc	r27, r26
     134:	ba 07       	cpc	r27, r26
     136:	ba 07       	cpc	r27, r26
     138:	ba 07       	cpc	r27, r26
     13a:	ba 07       	cpc	r27, r26
     13c:	ba 07       	cpc	r27, r26
     13e:	ba 07       	cpc	r27, r26
     140:	ba 07       	cpc	r27, r26
     142:	ba 07       	cpc	r27, r26
     144:	ba 07       	cpc	r27, r26
     146:	ba 07       	cpc	r27, r26
     148:	ba 07       	cpc	r27, r26
     14a:	ba 07       	cpc	r27, r26
     14c:	ba 07       	cpc	r27, r26
     14e:	ba 07       	cpc	r27, r26
     150:	ba 07       	cpc	r27, r26
     152:	ba 07       	cpc	r27, r26
     154:	ba 07       	cpc	r27, r26
     156:	ba 07       	cpc	r27, r26
     158:	ba 07       	cpc	r27, r26
     15a:	ba 07       	cpc	r27, r26
     15c:	ba 07       	cpc	r27, r26
     15e:	57 07       	cpc	r21, r23
     160:	70 07       	cpc	r23, r16
     162:	89 07       	cpc	r24, r25
     164:	a2 07       	cpc	r26, r18
     166:	d1 07       	cpc	r29, r17
     168:	cb 07       	cpc	r28, r27
     16a:	cd 07       	cpc	r28, r29
     16c:	cf 07       	cpc	r28, r31
     16e:	d2 07       	cpc	r29, r18
     170:	d2 07       	cpc	r29, r18
     172:	d2 07       	cpc	r29, r18
     174:	d2 07       	cpc	r29, r18
     176:	d2 07       	cpc	r29, r18
     178:	d2 07       	cpc	r29, r18
     17a:	d2 07       	cpc	r29, r18
     17c:	d2 07       	cpc	r29, r18
     17e:	d2 07       	cpc	r29, r18
     180:	d2 07       	cpc	r29, r18
     182:	d2 07       	cpc	r29, r18
     184:	d2 07       	cpc	r29, r18
     186:	d2 07       	cpc	r29, r18
     188:	d2 07       	cpc	r29, r18
     18a:	d2 07       	cpc	r29, r18
     18c:	d2 07       	cpc	r29, r18
     18e:	d2 07       	cpc	r29, r18
     190:	d2 07       	cpc	r29, r18
     192:	d2 07       	cpc	r29, r18
     194:	d2 07       	cpc	r29, r18
     196:	d2 07       	cpc	r29, r18
     198:	d2 07       	cpc	r29, r18
     19a:	d2 07       	cpc	r29, r18
     19c:	d2 07       	cpc	r29, r18
     19e:	d2 07       	cpc	r29, r18
     1a0:	d2 07       	cpc	r29, r18
     1a2:	d2 07       	cpc	r29, r18
     1a4:	d2 07       	cpc	r29, r18
     1a6:	d1 07       	cpc	r29, r17
     1a8:	cb 07       	cpc	r28, r27
     1aa:	cd 07       	cpc	r28, r29
     1ac:	cf 07       	cpc	r28, r31
     1ae:	e2 07       	cpc	r30, r18
     1b0:	fb 07       	cpc	r31, r27
     1b2:	14 08       	sbc	r1, r4
     1b4:	2d 08       	sbc	r2, r13
     1b6:	45 08       	sbc	r4, r5
     1b8:	45 08       	sbc	r4, r5
     1ba:	45 08       	sbc	r4, r5
     1bc:	45 08       	sbc	r4, r5
     1be:	45 08       	sbc	r4, r5
     1c0:	45 08       	sbc	r4, r5
     1c2:	45 08       	sbc	r4, r5
     1c4:	45 08       	sbc	r4, r5
     1c6:	45 08       	sbc	r4, r5
     1c8:	45 08       	sbc	r4, r5
     1ca:	45 08       	sbc	r4, r5
     1cc:	45 08       	sbc	r4, r5
     1ce:	45 08       	sbc	r4, r5
     1d0:	45 08       	sbc	r4, r5
     1d2:	45 08       	sbc	r4, r5
     1d4:	45 08       	sbc	r4, r5
     1d6:	45 08       	sbc	r4, r5
     1d8:	45 08       	sbc	r4, r5
     1da:	45 08       	sbc	r4, r5
     1dc:	45 08       	sbc	r4, r5
     1de:	45 08       	sbc	r4, r5
     1e0:	45 08       	sbc	r4, r5
     1e2:	45 08       	sbc	r4, r5
     1e4:	45 08       	sbc	r4, r5
     1e6:	45 08       	sbc	r4, r5
     1e8:	45 08       	sbc	r4, r5
     1ea:	45 08       	sbc	r4, r5
     1ec:	45 08       	sbc	r4, r5
     1ee:	45 08       	sbc	r4, r5
     1f0:	45 08       	sbc	r4, r5
     1f2:	45 08       	sbc	r4, r5
     1f4:	45 08       	sbc	r4, r5
     1f6:	45 08       	sbc	r4, r5
     1f8:	45 08       	sbc	r4, r5
     1fa:	45 08       	sbc	r4, r5
     1fc:	45 08       	sbc	r4, r5
     1fe:	45 08       	sbc	r4, r5
     200:	45 08       	sbc	r4, r5
     202:	45 08       	sbc	r4, r5
     204:	45 08       	sbc	r4, r5
     206:	45 08       	sbc	r4, r5
     208:	45 08       	sbc	r4, r5
     20a:	45 08       	sbc	r4, r5
     20c:	45 08       	sbc	r4, r5
     20e:	45 08       	sbc	r4, r5
     210:	45 08       	sbc	r4, r5
     212:	45 08       	sbc	r4, r5
     214:	45 08       	sbc	r4, r5
     216:	45 08       	sbc	r4, r5
     218:	45 08       	sbc	r4, r5
     21a:	45 08       	sbc	r4, r5
     21c:	45 08       	sbc	r4, r5
     21e:	45 08       	sbc	r4, r5
     220:	45 08       	sbc	r4, r5
     222:	45 08       	sbc	r4, r5
     224:	45 08       	sbc	r4, r5
     226:	45 08       	sbc	r4, r5
     228:	45 08       	sbc	r4, r5
     22a:	45 08       	sbc	r4, r5
     22c:	45 08       	sbc	r4, r5
     22e:	45 08       	sbc	r4, r5
     230:	e2 07       	cpc	r30, r18
     232:	fb 07       	cpc	r31, r27
     234:	14 08       	sbc	r1, r4
     236:	2d 08       	sbc	r2, r13
     238:	45 08       	sbc	r4, r5
     23a:	45 08       	sbc	r4, r5
     23c:	45 08       	sbc	r4, r5
     23e:	45 08       	sbc	r4, r5
     240:	45 08       	sbc	r4, r5
     242:	45 08       	sbc	r4, r5
     244:	45 08       	sbc	r4, r5
     246:	45 08       	sbc	r4, r5
     248:	45 08       	sbc	r4, r5
     24a:	45 08       	sbc	r4, r5
     24c:	45 08       	sbc	r4, r5
     24e:	45 08       	sbc	r4, r5
     250:	45 08       	sbc	r4, r5
     252:	45 08       	sbc	r4, r5
     254:	45 08       	sbc	r4, r5
     256:	45 08       	sbc	r4, r5
     258:	45 08       	sbc	r4, r5
     25a:	45 08       	sbc	r4, r5
     25c:	45 08       	sbc	r4, r5
     25e:	45 08       	sbc	r4, r5
     260:	45 08       	sbc	r4, r5
     262:	45 08       	sbc	r4, r5
     264:	45 08       	sbc	r4, r5
     266:	45 08       	sbc	r4, r5
     268:	45 08       	sbc	r4, r5
     26a:	45 08       	sbc	r4, r5
     26c:	45 08       	sbc	r4, r5
     26e:	45 08       	sbc	r4, r5
     270:	e2 07       	cpc	r30, r18
     272:	fb 07       	cpc	r31, r27
     274:	14 08       	sbc	r1, r4
     276:	2d 08       	sbc	r2, r13
     278:	5b 08       	sbc	r5, r11
     27a:	55 08       	sbc	r5, r5
     27c:	57 08       	sbc	r5, r7
     27e:	59 08       	sbc	r5, r9
     280:	5c 08       	sbc	r5, r12
     282:	5c 08       	sbc	r5, r12
     284:	5c 08       	sbc	r5, r12
     286:	5c 08       	sbc	r5, r12
     288:	5c 08       	sbc	r5, r12
     28a:	5c 08       	sbc	r5, r12
     28c:	5c 08       	sbc	r5, r12
     28e:	5c 08       	sbc	r5, r12
     290:	5c 08       	sbc	r5, r12
     292:	5c 08       	sbc	r5, r12
     294:	5c 08       	sbc	r5, r12
     296:	5c 08       	sbc	r5, r12
     298:	5c 08       	sbc	r5, r12
     29a:	5c 08       	sbc	r5, r12
     29c:	5c 08       	sbc	r5, r12
     29e:	5c 08       	sbc	r5, r12
     2a0:	5c 08       	sbc	r5, r12
     2a2:	5c 08       	sbc	r5, r12
     2a4:	5c 08       	sbc	r5, r12
     2a6:	5c 08       	sbc	r5, r12
     2a8:	5c 08       	sbc	r5, r12
     2aa:	5c 08       	sbc	r5, r12
     2ac:	5c 08       	sbc	r5, r12
     2ae:	5c 08       	sbc	r5, r12
     2b0:	5c 08       	sbc	r5, r12
     2b2:	5c 08       	sbc	r5, r12
     2b4:	5c 08       	sbc	r5, r12
     2b6:	5c 08       	sbc	r5, r12
     2b8:	5b 08       	sbc	r5, r11
     2ba:	55 08       	sbc	r5, r5
     2bc:	57 08       	sbc	r5, r7
     2be:	59 08       	sbc	r5, r9
     2c0:	69 08       	sbc	r6, r9
     2c2:	72 08       	sbc	r7, r2
     2c4:	7b 08       	sbc	r7, r11
     2c6:	84 08       	sbc	r8, r4
     2c8:	91 08       	sbc	r9, r1
     2ca:	91 08       	sbc	r9, r1
     2cc:	91 08       	sbc	r9, r1
     2ce:	91 08       	sbc	r9, r1
     2d0:	91 08       	sbc	r9, r1
     2d2:	91 08       	sbc	r9, r1
     2d4:	91 08       	sbc	r9, r1
     2d6:	91 08       	sbc	r9, r1
     2d8:	91 08       	sbc	r9, r1
     2da:	91 08       	sbc	r9, r1
     2dc:	91 08       	sbc	r9, r1
     2de:	91 08       	sbc	r9, r1
     2e0:	91 08       	sbc	r9, r1
     2e2:	91 08       	sbc	r9, r1
     2e4:	91 08       	sbc	r9, r1
     2e6:	91 08       	sbc	r9, r1
     2e8:	91 08       	sbc	r9, r1
     2ea:	91 08       	sbc	r9, r1
     2ec:	91 08       	sbc	r9, r1
     2ee:	91 08       	sbc	r9, r1
     2f0:	91 08       	sbc	r9, r1
     2f2:	91 08       	sbc	r9, r1
     2f4:	91 08       	sbc	r9, r1
     2f6:	91 08       	sbc	r9, r1
     2f8:	91 08       	sbc	r9, r1
     2fa:	91 08       	sbc	r9, r1
     2fc:	91 08       	sbc	r9, r1
     2fe:	91 08       	sbc	r9, r1
     300:	91 08       	sbc	r9, r1
     302:	91 08       	sbc	r9, r1
     304:	91 08       	sbc	r9, r1
     306:	91 08       	sbc	r9, r1
     308:	91 08       	sbc	r9, r1
     30a:	91 08       	sbc	r9, r1
     30c:	91 08       	sbc	r9, r1
     30e:	91 08       	sbc	r9, r1
     310:	91 08       	sbc	r9, r1
     312:	91 08       	sbc	r9, r1
     314:	91 08       	sbc	r9, r1
     316:	91 08       	sbc	r9, r1
     318:	91 08       	sbc	r9, r1
     31a:	91 08       	sbc	r9, r1
     31c:	91 08       	sbc	r9, r1
     31e:	91 08       	sbc	r9, r1
     320:	91 08       	sbc	r9, r1
     322:	91 08       	sbc	r9, r1
     324:	91 08       	sbc	r9, r1
     326:	91 08       	sbc	r9, r1
     328:	91 08       	sbc	r9, r1
     32a:	91 08       	sbc	r9, r1
     32c:	91 08       	sbc	r9, r1
     32e:	91 08       	sbc	r9, r1
     330:	91 08       	sbc	r9, r1
     332:	91 08       	sbc	r9, r1
     334:	91 08       	sbc	r9, r1
     336:	91 08       	sbc	r9, r1
     338:	91 08       	sbc	r9, r1
     33a:	91 08       	sbc	r9, r1
     33c:	91 08       	sbc	r9, r1
     33e:	91 08       	sbc	r9, r1
     340:	91 08       	sbc	r9, r1
     342:	69 08       	sbc	r6, r9
     344:	72 08       	sbc	r7, r2
     346:	7b 08       	sbc	r7, r11
     348:	84 08       	sbc	r8, r4
     34a:	91 08       	sbc	r9, r1
     34c:	91 08       	sbc	r9, r1
     34e:	91 08       	sbc	r9, r1
     350:	91 08       	sbc	r9, r1
     352:	91 08       	sbc	r9, r1
     354:	91 08       	sbc	r9, r1
     356:	91 08       	sbc	r9, r1
     358:	91 08       	sbc	r9, r1
     35a:	91 08       	sbc	r9, r1
     35c:	91 08       	sbc	r9, r1
     35e:	91 08       	sbc	r9, r1
     360:	91 08       	sbc	r9, r1
     362:	91 08       	sbc	r9, r1
     364:	91 08       	sbc	r9, r1
     366:	91 08       	sbc	r9, r1
     368:	91 08       	sbc	r9, r1
     36a:	91 08       	sbc	r9, r1
     36c:	91 08       	sbc	r9, r1
     36e:	91 08       	sbc	r9, r1
     370:	91 08       	sbc	r9, r1
     372:	91 08       	sbc	r9, r1
     374:	91 08       	sbc	r9, r1
     376:	91 08       	sbc	r9, r1
     378:	91 08       	sbc	r9, r1
     37a:	91 08       	sbc	r9, r1
     37c:	91 08       	sbc	r9, r1
     37e:	91 08       	sbc	r9, r1
     380:	91 08       	sbc	r9, r1
     382:	69 08       	sbc	r6, r9
     384:	72 08       	sbc	r7, r2
     386:	7b 08       	sbc	r7, r11
     388:	84 08       	sbc	r8, r4
     38a:	a6 08       	sbc	r10, r6
     38c:	a0 08       	sbc	r10, r0
     38e:	a2 08       	sbc	r10, r2
     390:	a4 08       	sbc	r10, r4
     392:	a7 08       	sbc	r10, r7
     394:	a7 08       	sbc	r10, r7
     396:	a7 08       	sbc	r10, r7
     398:	a7 08       	sbc	r10, r7
     39a:	a7 08       	sbc	r10, r7
     39c:	a7 08       	sbc	r10, r7
     39e:	a7 08       	sbc	r10, r7
     3a0:	a7 08       	sbc	r10, r7
     3a2:	a7 08       	sbc	r10, r7
     3a4:	a7 08       	sbc	r10, r7
     3a6:	a7 08       	sbc	r10, r7
     3a8:	a7 08       	sbc	r10, r7
     3aa:	a7 08       	sbc	r10, r7
     3ac:	a7 08       	sbc	r10, r7
     3ae:	a7 08       	sbc	r10, r7
     3b0:	a7 08       	sbc	r10, r7
     3b2:	a7 08       	sbc	r10, r7
     3b4:	a7 08       	sbc	r10, r7
     3b6:	a7 08       	sbc	r10, r7
     3b8:	a7 08       	sbc	r10, r7
     3ba:	a7 08       	sbc	r10, r7
     3bc:	a7 08       	sbc	r10, r7
     3be:	a7 08       	sbc	r10, r7
     3c0:	a7 08       	sbc	r10, r7
     3c2:	a7 08       	sbc	r10, r7
     3c4:	a7 08       	sbc	r10, r7
     3c6:	a7 08       	sbc	r10, r7
     3c8:	a7 08       	sbc	r10, r7
     3ca:	a6 08       	sbc	r10, r6
     3cc:	a0 08       	sbc	r10, r0
     3ce:	a2 08       	sbc	r10, r2
     3d0:	a4 08       	sbc	r10, r4
     3d2:	b2 08       	sbc	r11, r2
     3d4:	b4 08       	sbc	r11, r4
     3d6:	b6 08       	sbc	r11, r6
     3d8:	b8 08       	sbc	r11, r8
     3da:	b9 08       	sbc	r11, r9
     3dc:	b9 08       	sbc	r11, r9
     3de:	b9 08       	sbc	r11, r9
     3e0:	b9 08       	sbc	r11, r9
     3e2:	b9 08       	sbc	r11, r9
     3e4:	b9 08       	sbc	r11, r9
     3e6:	b9 08       	sbc	r11, r9
     3e8:	b9 08       	sbc	r11, r9
     3ea:	b9 08       	sbc	r11, r9
     3ec:	b9 08       	sbc	r11, r9
     3ee:	b9 08       	sbc	r11, r9
     3f0:	b9 08       	sbc	r11, r9
     3f2:	b9 08       	sbc	r11, r9
     3f4:	b9 08       	sbc	r11, r9
     3f6:	b9 08       	sbc	r11, r9
     3f8:	b9 08       	sbc	r11, r9
     3fa:	b9 08       	sbc	r11, r9
     3fc:	b9 08       	sbc	r11, r9
     3fe:	b9 08       	sbc	r11, r9
     400:	b9 08       	sbc	r11, r9
     402:	b9 08       	sbc	r11, r9
     404:	b9 08       	sbc	r11, r9
     406:	b9 08       	sbc	r11, r9
     408:	b9 08       	sbc	r11, r9
     40a:	b9 08       	sbc	r11, r9
     40c:	b9 08       	sbc	r11, r9
     40e:	b9 08       	sbc	r11, r9
     410:	b9 08       	sbc	r11, r9
     412:	b9 08       	sbc	r11, r9
     414:	b9 08       	sbc	r11, r9
     416:	b9 08       	sbc	r11, r9
     418:	b9 08       	sbc	r11, r9
     41a:	b9 08       	sbc	r11, r9
     41c:	b9 08       	sbc	r11, r9
     41e:	b9 08       	sbc	r11, r9
     420:	b9 08       	sbc	r11, r9
     422:	b9 08       	sbc	r11, r9
     424:	b9 08       	sbc	r11, r9
     426:	b9 08       	sbc	r11, r9
     428:	b9 08       	sbc	r11, r9
     42a:	b9 08       	sbc	r11, r9
     42c:	b9 08       	sbc	r11, r9
     42e:	b9 08       	sbc	r11, r9
     430:	b9 08       	sbc	r11, r9
     432:	b9 08       	sbc	r11, r9
     434:	b9 08       	sbc	r11, r9
     436:	b9 08       	sbc	r11, r9
     438:	b9 08       	sbc	r11, r9
     43a:	b9 08       	sbc	r11, r9
     43c:	b9 08       	sbc	r11, r9
     43e:	b9 08       	sbc	r11, r9
     440:	b9 08       	sbc	r11, r9
     442:	b9 08       	sbc	r11, r9
     444:	b9 08       	sbc	r11, r9
     446:	b9 08       	sbc	r11, r9
     448:	b9 08       	sbc	r11, r9
     44a:	b9 08       	sbc	r11, r9
     44c:	b9 08       	sbc	r11, r9
     44e:	b9 08       	sbc	r11, r9
     450:	b9 08       	sbc	r11, r9
     452:	b9 08       	sbc	r11, r9
     454:	b2 08       	sbc	r11, r2
     456:	b4 08       	sbc	r11, r4
     458:	b6 08       	sbc	r11, r6
     45a:	b8 08       	sbc	r11, r8
     45c:	b9 08       	sbc	r11, r9
     45e:	b9 08       	sbc	r11, r9
     460:	b9 08       	sbc	r11, r9
     462:	b9 08       	sbc	r11, r9
     464:	b9 08       	sbc	r11, r9
     466:	b9 08       	sbc	r11, r9
     468:	b9 08       	sbc	r11, r9
     46a:	b9 08       	sbc	r11, r9
     46c:	b9 08       	sbc	r11, r9
     46e:	b9 08       	sbc	r11, r9
     470:	b9 08       	sbc	r11, r9
     472:	b9 08       	sbc	r11, r9
     474:	b9 08       	sbc	r11, r9
     476:	b9 08       	sbc	r11, r9
     478:	b9 08       	sbc	r11, r9
     47a:	b9 08       	sbc	r11, r9
     47c:	b9 08       	sbc	r11, r9
     47e:	b9 08       	sbc	r11, r9
     480:	b9 08       	sbc	r11, r9
     482:	b9 08       	sbc	r11, r9
     484:	b9 08       	sbc	r11, r9
     486:	b9 08       	sbc	r11, r9
     488:	b9 08       	sbc	r11, r9
     48a:	b9 08       	sbc	r11, r9
     48c:	b9 08       	sbc	r11, r9
     48e:	b9 08       	sbc	r11, r9
     490:	b9 08       	sbc	r11, r9
     492:	b9 08       	sbc	r11, r9
     494:	b2 08       	sbc	r11, r2
     496:	b4 08       	sbc	r11, r4
     498:	b6 08       	sbc	r11, r6
     49a:	b8 08       	sbc	r11, r8
     49c:	cd 08       	sbc	r12, r13
     49e:	c7 08       	sbc	r12, r7
     4a0:	c9 08       	sbc	r12, r9
     4a2:	cb 08       	sbc	r12, r11
     4a4:	ce 08       	sbc	r12, r14
     4a6:	ce 08       	sbc	r12, r14
     4a8:	ce 08       	sbc	r12, r14
     4aa:	ce 08       	sbc	r12, r14
     4ac:	ce 08       	sbc	r12, r14
     4ae:	ce 08       	sbc	r12, r14
     4b0:	ce 08       	sbc	r12, r14
     4b2:	ce 08       	sbc	r12, r14
     4b4:	ce 08       	sbc	r12, r14
     4b6:	ce 08       	sbc	r12, r14
     4b8:	ce 08       	sbc	r12, r14
     4ba:	ce 08       	sbc	r12, r14
     4bc:	ce 08       	sbc	r12, r14
     4be:	ce 08       	sbc	r12, r14
     4c0:	ce 08       	sbc	r12, r14
     4c2:	ce 08       	sbc	r12, r14
     4c4:	ce 08       	sbc	r12, r14
     4c6:	ce 08       	sbc	r12, r14
     4c8:	ce 08       	sbc	r12, r14
     4ca:	ce 08       	sbc	r12, r14
     4cc:	ce 08       	sbc	r12, r14
     4ce:	ce 08       	sbc	r12, r14
     4d0:	ce 08       	sbc	r12, r14
     4d2:	ce 08       	sbc	r12, r14
     4d4:	ce 08       	sbc	r12, r14
     4d6:	ce 08       	sbc	r12, r14
     4d8:	ce 08       	sbc	r12, r14
     4da:	ce 08       	sbc	r12, r14
     4dc:	cd 08       	sbc	r12, r13
     4de:	c7 08       	sbc	r12, r7
     4e0:	c9 08       	sbc	r12, r9
     4e2:	cb 08       	sbc	r12, r11
     4e4:	d9 08       	sbc	r13, r9
     4e6:	db 08       	sbc	r13, r11
     4e8:	dd 08       	sbc	r13, r13
     4ea:	df 08       	sbc	r13, r15
     4ec:	e0 08       	sbc	r14, r0
     4ee:	e0 08       	sbc	r14, r0
     4f0:	e0 08       	sbc	r14, r0
     4f2:	e0 08       	sbc	r14, r0
     4f4:	e0 08       	sbc	r14, r0
     4f6:	e0 08       	sbc	r14, r0
     4f8:	e0 08       	sbc	r14, r0
     4fa:	e0 08       	sbc	r14, r0
     4fc:	e0 08       	sbc	r14, r0
     4fe:	e0 08       	sbc	r14, r0
     500:	e0 08       	sbc	r14, r0
     502:	e0 08       	sbc	r14, r0
     504:	e0 08       	sbc	r14, r0
     506:	e0 08       	sbc	r14, r0
     508:	e0 08       	sbc	r14, r0
     50a:	e0 08       	sbc	r14, r0
     50c:	e0 08       	sbc	r14, r0
     50e:	e0 08       	sbc	r14, r0
     510:	e0 08       	sbc	r14, r0
     512:	e0 08       	sbc	r14, r0
     514:	e0 08       	sbc	r14, r0
     516:	e0 08       	sbc	r14, r0
     518:	e0 08       	sbc	r14, r0
     51a:	e0 08       	sbc	r14, r0
     51c:	e0 08       	sbc	r14, r0
     51e:	e0 08       	sbc	r14, r0
     520:	e0 08       	sbc	r14, r0
     522:	e0 08       	sbc	r14, r0
     524:	e0 08       	sbc	r14, r0
     526:	e0 08       	sbc	r14, r0
     528:	e0 08       	sbc	r14, r0
     52a:	e0 08       	sbc	r14, r0
     52c:	e0 08       	sbc	r14, r0
     52e:	e0 08       	sbc	r14, r0
     530:	e0 08       	sbc	r14, r0
     532:	e0 08       	sbc	r14, r0
     534:	e0 08       	sbc	r14, r0
     536:	e0 08       	sbc	r14, r0
     538:	e0 08       	sbc	r14, r0
     53a:	e0 08       	sbc	r14, r0
     53c:	e0 08       	sbc	r14, r0
     53e:	e0 08       	sbc	r14, r0
     540:	e0 08       	sbc	r14, r0
     542:	e0 08       	sbc	r14, r0
     544:	e0 08       	sbc	r14, r0
     546:	e0 08       	sbc	r14, r0
     548:	e0 08       	sbc	r14, r0
     54a:	e0 08       	sbc	r14, r0
     54c:	e0 08       	sbc	r14, r0
     54e:	e0 08       	sbc	r14, r0
     550:	e0 08       	sbc	r14, r0
     552:	e0 08       	sbc	r14, r0
     554:	e0 08       	sbc	r14, r0
     556:	e0 08       	sbc	r14, r0
     558:	e0 08       	sbc	r14, r0
     55a:	e0 08       	sbc	r14, r0
     55c:	e0 08       	sbc	r14, r0
     55e:	e0 08       	sbc	r14, r0
     560:	e0 08       	sbc	r14, r0
     562:	e0 08       	sbc	r14, r0
     564:	e0 08       	sbc	r14, r0
     566:	d9 08       	sbc	r13, r9
     568:	db 08       	sbc	r13, r11
     56a:	dd 08       	sbc	r13, r13
     56c:	df 08       	sbc	r13, r15
     56e:	e0 08       	sbc	r14, r0
     570:	e0 08       	sbc	r14, r0
     572:	e0 08       	sbc	r14, r0
     574:	e0 08       	sbc	r14, r0
     576:	e0 08       	sbc	r14, r0
     578:	e0 08       	sbc	r14, r0
     57a:	e0 08       	sbc	r14, r0
     57c:	e0 08       	sbc	r14, r0
     57e:	e0 08       	sbc	r14, r0
     580:	e0 08       	sbc	r14, r0
     582:	e0 08       	sbc	r14, r0
     584:	e0 08       	sbc	r14, r0
     586:	e0 08       	sbc	r14, r0
     588:	e0 08       	sbc	r14, r0
     58a:	e0 08       	sbc	r14, r0
     58c:	e0 08       	sbc	r14, r0
     58e:	e0 08       	sbc	r14, r0
     590:	e0 08       	sbc	r14, r0
     592:	e0 08       	sbc	r14, r0
     594:	e0 08       	sbc	r14, r0
     596:	e0 08       	sbc	r14, r0
     598:	e0 08       	sbc	r14, r0
     59a:	e0 08       	sbc	r14, r0
     59c:	e0 08       	sbc	r14, r0
     59e:	e0 08       	sbc	r14, r0
     5a0:	e0 08       	sbc	r14, r0
     5a2:	e0 08       	sbc	r14, r0
     5a4:	e0 08       	sbc	r14, r0
     5a6:	d9 08       	sbc	r13, r9
     5a8:	db 08       	sbc	r13, r11
     5aa:	dd 08       	sbc	r13, r13
     5ac:	df 08       	sbc	r13, r15

000005ae <__ctors_end>:
     5ae:	11 24       	eor	r1, r1
     5b0:	1f be       	out	0x3f, r1	; 63
     5b2:	cf e5       	ldi	r28, 0x5F	; 95
     5b4:	d8 e0       	ldi	r29, 0x08	; 8
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	cd bf       	out	0x3d, r28	; 61

000005ba <__do_copy_data>:
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	a0 e6       	ldi	r26, 0x60	; 96
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e6 e2       	ldi	r30, 0x26	; 38
     5c2:	f6 e1       	ldi	r31, 0x16	; 22
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <__do_copy_data+0x10>
     5c6:	05 90       	lpm	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	ae 3e       	cpi	r26, 0xEE	; 238
     5cc:	b1 07       	cpc	r27, r17
     5ce:	d9 f7       	brne	.-10     	; 0x5c6 <__do_copy_data+0xc>

000005d0 <__do_clear_bss>:
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	ae ee       	ldi	r26, 0xEE	; 238
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <.do_clear_bss_start>

000005d8 <.do_clear_bss_loop>:
     5d8:	1d 92       	st	X+, r1

000005da <.do_clear_bss_start>:
     5da:	a8 3f       	cpi	r26, 0xF8	; 248
     5dc:	b2 07       	cpc	r27, r18
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <.do_clear_bss_loop>
     5e0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <main>
     5e4:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <_exit>

000005e8 <__bad_interrupt>:
     5e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ec <system_init>:
u8 password_trials = 0;


void system_init(void)
{
	LCD_voidInit();
     5ec:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_voidInit>
	KEYPAD_voidInit();
     5f0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <KEYPAD_voidInit>
	ADC_init();
     5f4:	0e 94 16 07 	call	0xe2c	; 0xe2c <ADC_init>
	motor_init();
     5f8:	0e 94 d3 06 	call	0xda6	; 0xda6 <motor_init>
     5fc:	08 95       	ret

000005fe <empty_string>:
	}
}


void empty_string(u8* str, u8 str_len)
{
     5fe:	9c 01       	movw	r18, r24
	for (u8 i=0; i<str_len; i++)
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	05 c0       	rjmp	.+10     	; 0x60e <empty_string+0x10>
	{
		str[i] = '\0';
     604:	f9 01       	movw	r30, r18
     606:	e9 0f       	add	r30, r25
     608:	f1 1d       	adc	r31, r1
     60a:	10 82       	st	Z, r1
}


void empty_string(u8* str, u8 str_len)
{
	for (u8 i=0; i<str_len; i++)
     60c:	9f 5f       	subi	r25, 0xFF	; 255
     60e:	96 17       	cp	r25, r22
     610:	c8 f3       	brcs	.-14     	; 0x604 <empty_string+0x6>
	{
		str[i] = '\0';
	}
}
     612:	08 95       	ret

00000614 <check_two_string_equal>:

u8 check_two_string_equal(u8* str1, u8* str2)      //return 1 if equal and 0 if not 
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	dc 01       	movw	r26, r24
     61a:	eb 01       	movw	r28, r22
	if (strlen(str1) != strlen(str2))
     61c:	fc 01       	movw	r30, r24
     61e:	01 90       	ld	r0, Z+
     620:	00 20       	and	r0, r0
     622:	e9 f7       	brne	.-6      	; 0x61e <check_two_string_equal+0xa>
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	af 01       	movw	r20, r30
     628:	48 1b       	sub	r20, r24
     62a:	59 0b       	sbc	r21, r25
     62c:	fb 01       	movw	r30, r22
     62e:	01 90       	ld	r0, Z+
     630:	00 20       	and	r0, r0
     632:	e9 f7       	brne	.-6      	; 0x62e <check_two_string_equal+0x1a>
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	e6 1b       	sub	r30, r22
     638:	f7 0b       	sbc	r31, r23
     63a:	4e 17       	cp	r20, r30
     63c:	5f 07       	cpc	r21, r31
     63e:	a1 f4       	brne	.+40     	; 0x668 <check_two_string_equal+0x54>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0b c0       	rjmp	.+22     	; 0x65a <check_two_string_equal+0x46>
	} 
	else
	{
		for (u8 i=0; i<strlen(str1); i++)
		{
			if (str1[i] != str2[i])
     644:	fd 01       	movw	r30, r26
     646:	e2 0f       	add	r30, r18
     648:	f3 1f       	adc	r31, r19
     64a:	70 81       	ld	r23, Z
     64c:	fe 01       	movw	r30, r28
     64e:	e2 0f       	add	r30, r18
     650:	f3 1f       	adc	r31, r19
     652:	20 81       	ld	r18, Z
     654:	72 13       	cpse	r23, r18
     656:	0a c0       	rjmp	.+20     	; 0x66c <check_two_string_equal+0x58>
	{
		return 0;
	} 
	else
	{
		for (u8 i=0; i<strlen(str1); i++)
     658:	9f 5f       	subi	r25, 0xFF	; 255
     65a:	29 2f       	mov	r18, r25
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	24 17       	cp	r18, r20
     660:	35 07       	cpc	r19, r21
     662:	80 f3       	brcs	.-32     	; 0x644 <check_two_string_equal+0x30>
			if (str1[i] != str2[i])
			{
				return 0;
			}
		}
		return 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	03 c0       	rjmp	.+6      	; 0x66e <check_two_string_equal+0x5a>

u8 check_two_string_equal(u8* str1, u8* str2)      //return 1 if equal and 0 if not 
{
	if (strlen(str1) != strlen(str2))
	{
		return 0;
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	01 c0       	rjmp	.+2      	; 0x66e <check_two_string_equal+0x5a>
	{
		for (u8 i=0; i<strlen(str1); i++)
		{
			if (str1[i] != str2[i])
			{
				return 0;
     66c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		return 1;
	}
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <wait_two_mins>:



void wait_two_mins(void){
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
	password_trials = 0;
     67a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__data_end>
	u8 sec = 120;
	u8 min = sec/60;
	LCD_voidClearScreen();
     67e:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
	LCD_voidSendString("System Off for:");
     682:	85 e7       	ldi	r24, 0x75	; 117
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
	LCD_moveCursor(1,2);
     68a:	62 e0       	ldi	r22, 0x02	; 2
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_moveCursor>
	LCD_voidSendData(':');
     692:	8a e3       	ldi	r24, 0x3A	; 58
     694:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_voidSendData>



void wait_two_mins(void){
	password_trials = 0;
	u8 sec = 120;
     698:	18 e7       	ldi	r17, 0x78	; 120
	u8 min = sec/60;
	LCD_voidClearScreen();
	LCD_voidSendString("System Off for:");
	LCD_moveCursor(1,2);
	LCD_voidSendData(':');
	while(sec != 0)
     69a:	41 c0       	rjmp	.+130    	; 0x71e <wait_two_mins+0xaa>
	{
		u8 min = sec/60;
     69c:	c9 e8       	ldi	r28, 0x89	; 137
     69e:	1c 9f       	mul	r17, r28
     6a0:	c1 2d       	mov	r28, r1
     6a2:	11 24       	eor	r1, r1
     6a4:	c2 95       	swap	r28
     6a6:	c6 95       	lsr	r28
     6a8:	c7 70       	andi	r28, 0x07	; 7
		LCD_moveCursor(1,0);
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_moveCursor>
		LCD_voidIntgerToString(0);
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	cb 01       	movw	r24, r22
     6b8:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_voidIntgerToString>
		LCD_voidIntgerToString(min);
     6bc:	6c 2f       	mov	r22, r28
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_voidIntgerToString>
		LCD_voidSendData(':');
     6c8:	8a e3       	ldi	r24, 0x3A	; 58
     6ca:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_voidSendData>
		if ((sec - min*60)/10>0)
     6ce:	61 2f       	mov	r22, r17
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	cb 01       	movw	r24, r22
     6d4:	2c e3       	ldi	r18, 0x3C	; 60
     6d6:	c2 9f       	mul	r28, r18
     6d8:	80 19       	sub	r24, r0
     6da:	91 09       	sbc	r25, r1
     6dc:	11 24       	eor	r1, r1
     6de:	ec 01       	movw	r28, r24
     6e0:	8a 30       	cpi	r24, 0x0A	; 10
     6e2:	91 05       	cpc	r25, r1
     6e4:	3c f0       	brlt	.+14     	; 0x6f4 <wait_two_mins+0x80>
		{
			LCD_voidIntgerToString(sec - min*60);
     6e6:	bc 01       	movw	r22, r24
     6e8:	99 0f       	add	r25, r25
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_voidIntgerToString>
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <wait_two_mins+0x96>
		}
		else
		{
			LCD_voidIntgerToString(0);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	cb 01       	movw	r24, r22
     6fa:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_voidIntgerToString>
			LCD_voidIntgerToString(sec - min*60);
     6fe:	be 01       	movw	r22, r28
     700:	dd 0f       	add	r29, r29
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_voidIntgerToString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	8f e3       	ldi	r24, 0x3F	; 63
     70c:	9d e0       	ldi	r25, 0x0D	; 13
     70e:	23 e0       	ldi	r18, 0x03	; 3
     710:	81 50       	subi	r24, 0x01	; 1
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	20 40       	sbci	r18, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <wait_two_mins+0x9c>
     718:	00 c0       	rjmp	.+0      	; 0x71a <wait_two_mins+0xa6>
     71a:	00 00       	nop
		}
		_delay_ms(1000);
		sec--;
     71c:	11 50       	subi	r17, 0x01	; 1
	u8 min = sec/60;
	LCD_voidClearScreen();
	LCD_voidSendString("System Off for:");
	LCD_moveCursor(1,2);
	LCD_voidSendData(':');
	while(sec != 0)
     71e:	11 11       	cpse	r17, r1
     720:	bd cf       	rjmp	.-134    	; 0x69c <wait_two_mins+0x28>
		}
		_delay_ms(1000);
		sec--;
	}
	
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <check_password>:
	motor_init();
}


void check_password(void)
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
	LCD_voidClearScreen();
     72e:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
	LCD_voidSendString("Please Enter");
     732:	85 e8       	ldi	r24, 0x85	; 133
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
	LCD_moveCursor(1,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_moveCursor>
	LCD_voidSendString("Password:");
     742:	82 e9       	ldi	r24, 0x92	; 146
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
	while(running == 0)
     74a:	5b c0       	rjmp	.+182    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     74c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		u8 i = 0;
		while (1)
		{
			u8 c = KEYPAD_u8GetPressedKey();
     74e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <KEYPAD_u8GetPressedKey>
			if (c == 'c')
     752:	83 36       	cpi	r24, 0x63	; 99
     754:	71 f0       	breq	.+28     	; 0x772 <check_password+0x48>
			{
				break;
			}
			else if (c != KEYPAD_BUTTON_RELEASED)
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	d1 f3       	breq	.-12     	; 0x74e <check_password+0x24>
			{
				entered_password[i++] = c;
     75a:	d1 e0       	ldi	r29, 0x01	; 1
     75c:	dc 0f       	add	r29, r28
     75e:	ec 2f       	mov	r30, r28
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	e0 51       	subi	r30, 0x10	; 16
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 83       	st	Z, r24
				LCD_voidSendData('*');
     768:	8a e2       	ldi	r24, 0x2A	; 42
     76a:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_voidSendData>
			{
				break;
			}
			else if (c != KEYPAD_BUTTON_RELEASED)
			{
				entered_password[i++] = c;
     76e:	cd 2f       	mov	r28, r29
     770:	ee cf       	rjmp	.-36     	; 0x74e <check_password+0x24>
				LCD_voidSendData('*');
			}
		}
		if (check_two_string_equal(entered_password,password) == 1)
     772:	60 e6       	ldi	r22, 0x60	; 96
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 ef       	ldi	r24, 0xF0	; 240
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 0a 03 	call	0x614	; 0x614 <check_two_string_equal>
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	a9 f4       	brne	.+42     	; 0x7ac <check_password+0x82>
		{
			LCD_voidClearScreen();
     782:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
			LCD_voidSendString("Welcome Ahmed !!");
     786:	8c e9       	ldi	r24, 0x9C	; 156
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
     78e:	2f e7       	ldi	r18, 0x7F	; 127
     790:	8a e1       	ldi	r24, 0x1A	; 26
     792:	96 e0       	ldi	r25, 0x06	; 6
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <check_password+0x6a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <check_password+0x74>
     79e:	00 00       	nop
			_delay_ms(2000);
			LCD_voidClearScreen();
     7a0:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
			running = 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <running>
			return;
     7aa:	30 c0       	rjmp	.+96     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		}
		else
		{
			password_trials++;
     7ac:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__data_end>
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__data_end>
			empty_string(entered_password, 8);
     7b6:	68 e0       	ldi	r22, 0x08	; 8
     7b8:	80 ef       	ldi	r24, 0xF0	; 240
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <empty_string>
			LCD_voidClearScreen();
     7c0:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
			LCD_voidSendString("Wrong Password");
     7c4:	8d ea       	ldi	r24, 0xAD	; 173
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
			LCD_moveCursor(1,0);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_moveCursor>
			LCD_voidSendString("Please Try again");
     7d4:	8c eb       	ldi	r24, 0xBC	; 188
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
     7dc:	2f e3       	ldi	r18, 0x3F	; 63
     7de:	8d e0       	ldi	r24, 0x0D	; 13
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <check_password+0xb8>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <check_password+0xc2>
     7ec:	00 00       	nop
			_delay_ms(1000);
			if (password_trials == 3)
     7ee:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__data_end>
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	11 f4       	brne	.+4      	; 0x7fa <check_password+0xd0>
			{
				wait_two_mins();
     7f6:	0e 94 3a 03 	call	0x674	; 0x674 <wait_two_mins>
			}
			running = 0;
     7fa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <running>
			check_password();
     7fe:	0e 94 95 03 	call	0x72a	; 0x72a <check_password>
{
	LCD_voidClearScreen();
	LCD_voidSendString("Please Enter");
	LCD_moveCursor(1,0);
	LCD_voidSendString("Password:");
	while(running == 0)
     802:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <running>
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	a0 cf       	rjmp	.-192    	; 0x74c <check_password+0x22>
			}
			running = 0;
			check_password();
		}
	}
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <led_on_off>:
	
}

void led_on_off(void)
{
	u8 c = KEYPAD_u8GetPressedKey();
     812:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <KEYPAD_u8GetPressedKey>
	if (c == '1')
     816:	81 33       	cpi	r24, 0x31	; 49
     818:	39 f4       	brne	.+14     	; 0x828 <led_on_off+0x16>
	{
		LED_ON(PORTB_ID,PIN7_ID);
     81a:	67 e0       	ldi	r22, 0x07	; 7
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 9a 06 	call	0xd34	; 0xd34 <LED_ON>
     826:	08 95       	ret
	}
	else if(c == '2')
     828:	82 33       	cpi	r24, 0x32	; 50
     82a:	31 f4       	brne	.+12     	; 0x838 <led_on_off+0x26>
	{
		LED_OFF(PORTB_ID,PIN7_ID);
     82c:	67 e0       	ldi	r22, 0x07	; 7
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 a9 06 	call	0xd52	; 0xd52 <LED_OFF>
     838:	08 95       	ret

0000083a <system_on>:
	}
}


void system_on(void)
{
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
	LCD_voidClearScreen();
     83e:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
	LCD_voidSendString("System ON");
     842:	8d ec       	ldi	r24, 0xCD	; 205
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
     84a:	2f e3       	ldi	r18, 0x3F	; 63
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	21 50       	subi	r18, 0x01	; 1
     852:	80 40       	sbci	r24, 0x00	; 0
     854:	90 40       	sbci	r25, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <system_on+0x16>
     858:	00 c0       	rjmp	.+0      	; 0x85a <system_on+0x20>
     85a:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClearScreen();
     85c:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
	LCD_voidSendString("1- Leds ON");
     860:	87 ed       	ldi	r24, 0xD7	; 215
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
	LCD_moveCursor(1,0);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_moveCursor>
	LCD_voidSendString("2- Leds OFF");
     870:	82 ee       	ldi	r24, 0xE2	; 226
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
	while(running == 1)
     878:	25 c0       	rjmp	.+74     	; 0x8c4 <__stack+0x65>
	{
		led_on_off();
     87a:	0e 94 09 04 	call	0x812	; 0x812 <led_on_off>
		u32 temperature = (u32)Read_LM35_f32();
     87e:	0e 94 b8 06 	call	0xd70	; 0xd70 <Read_LM35_f32>
     882:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fixunssfsi>
		if (temperature>=30)
     886:	6e 31       	cpi	r22, 0x1E	; 30
     888:	71 05       	cpc	r23, r1
     88a:	81 05       	cpc	r24, r1
     88c:	91 05       	cpc	r25, r1
     88e:	18 f0       	brcs	.+6      	; 0x896 <__stack+0x37>
		{
			motor_start();
     890:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <motor_start>
     894:	17 c0       	rjmp	.+46     	; 0x8c4 <__stack+0x65>
		}
		else if (temperature>25 & temperature<30)
     896:	8b 01       	movw	r16, r22
     898:	9c 01       	movw	r18, r24
     89a:	0a 51       	subi	r16, 0x1A	; 26
     89c:	11 09       	sbc	r17, r1
     89e:	21 09       	sbc	r18, r1
     8a0:	31 09       	sbc	r19, r1
     8a2:	04 30       	cpi	r16, 0x04	; 4
     8a4:	11 05       	cpc	r17, r1
     8a6:	21 05       	cpc	r18, r1
     8a8:	31 05       	cpc	r19, r1
     8aa:	28 f4       	brcc	.+10     	; 0x8b6 <__stack+0x57>
		{
			motor_set_speed(50);
     8ac:	82 e3       	ldi	r24, 0x32	; 50
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <motor_set_speed>
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <__stack+0x65>
		}
		else if (temperature<=25)
     8b6:	6a 31       	cpi	r22, 0x1A	; 26
     8b8:	71 05       	cpc	r23, r1
     8ba:	81 05       	cpc	r24, r1
     8bc:	91 05       	cpc	r25, r1
     8be:	10 f4       	brcc	.+4      	; 0x8c4 <__stack+0x65>
		{
			motor_stop();
     8c0:	0e 94 f0 06 	call	0xde0	; 0xde0 <motor_stop>
	_delay_ms(1000);
	LCD_voidClearScreen();
	LCD_voidSendString("1- Leds ON");
	LCD_moveCursor(1,0);
	LCD_voidSendString("2- Leds OFF");
	while(running == 1)
     8c4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <running>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	b9 f2       	breq	.-82     	; 0x87a <__stack+0x1b>
		else if (temperature<=25)
		{
			motor_stop();
		}
	}
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <KEYPAD_voidInit>:
#include "../LIB/std_types.h"


void KEYPAD_voidInit(void)
{
	GPIO_setupPortDirection(KEYPAD_ROW_PORT,0x00);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPortDirection>
	GPIO_writePort(KEYPAD_ROW_PORT,0x0F);     //to use the pull up
     8da:	6f e0       	ldi	r22, 0x0F	; 15
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePort>
	
	GPIO_setupPortDirection(KEYPAD_COL_PORT,0xF0);
     8e2:	60 ef       	ldi	r22, 0xF0	; 240
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPortDirection>
	GPIO_writePort(KEYPAD_COL_PORT,0xFF);      //0x0F doesn't matter
     8ea:	6f ef       	ldi	r22, 0xFF	; 255
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePort>
     8f2:	08 95       	ret

000008f4 <KEYPAD_u8GetPressedKey>:
}


u8 KEYPAD_u8GetPressedKey(void)
{
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	68 97       	sbiw	r28, 0x18	; 24
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
	u8 u8RowLocal = 0;
	u8 u8ColLocal = 0;
	
	u8 KPD_u8RowPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
     918:	19 82       	std	Y+1, r1	; 0x01
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	8b 83       	std	Y+3, r24	; 0x03
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	8c 83       	std	Y+4, r24	; 0x04
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	8d 83       	std	Y+5, r24	; 0x05
     92a:	85 e0       	ldi	r24, 0x05	; 5
     92c:	8e 83       	std	Y+6, r24	; 0x06
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	8f 83       	std	Y+7, r24	; 0x07
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	88 87       	std	Y+8, r24	; 0x08
	
	
	for (u8ColLocal=0; u8ColLocal<KEYPAD_NUM_COLS; u8ColLocal++)
     936:	b1 2c       	mov	r11, r1
     938:	4f c0       	rjmp	.+158    	; 0x9d8 <KEYPAD_u8GetPressedKey+0xe4>
	{
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
     93a:	cb 2c       	mov	r12, r11
     93c:	d1 2c       	mov	r13, r1
     93e:	e5 e0       	ldi	r30, 0x05	; 5
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ec 0f       	add	r30, r28
     944:	fd 1f       	adc	r31, r29
     946:	ec 0d       	add	r30, r12
     948:	fd 1d       	adc	r31, r13
     94a:	a0 80       	ld	r10, Z
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	6a 2d       	mov	r22, r10
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
		for (u8RowLocal=0; u8RowLocal<KEYPAD_NUM_ROWS; u8RowLocal++)
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	37 c0       	rjmp	.+110    	; 0x9c8 <KEYPAD_u8GetPressedKey+0xd4>
		{
			u8 u8Value = GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RowPinArr[u8RowLocal]);
     95a:	e1 2e       	mov	r14, r17
     95c:	f1 2c       	mov	r15, r1
     95e:	e1 e0       	ldi	r30, 0x01	; 1
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	ee 0d       	add	r30, r14
     968:	ff 1d       	adc	r31, r15
     96a:	00 81       	ld	r16, Z
     96c:	60 2f       	mov	r22, r16
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_readPin>
			
			if (u8Value == KEYPAD_BUTTON_PRESSED)
     974:	81 11       	cpse	r24, r1
     976:	27 c0       	rjmp	.+78     	; 0x9c6 <KEYPAD_u8GetPressedKey+0xd2>
     978:	ef e5       	ldi	r30, 0x5F	; 95
     97a:	fa ee       	ldi	r31, 0xEA	; 234
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <KEYPAD_u8GetPressedKey+0x88>
     980:	00 c0       	rjmp	.+0      	; 0x982 <KEYPAD_u8GetPressedKey+0x8e>
     982:	00 00       	nop
			{
				_delay_ms(30);       //for debouncing
				if (u8Value == KEYPAD_BUTTON_PRESSED)
     984:	81 11       	cpse	r24, r1
     986:	1f c0       	rjmp	.+62     	; 0x9c6 <KEYPAD_u8GetPressedKey+0xd2>
     988:	04 c0       	rjmp	.+8      	; 0x992 <KEYPAD_u8GetPressedKey+0x9e>
				{
					while (u8Value == KEYPAD_BUTTON_PRESSED)
					{
						u8Value = GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RowPinArr[u8RowLocal]);
     98a:	60 2f       	mov	r22, r16
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_readPin>
			if (u8Value == KEYPAD_BUTTON_PRESSED)
			{
				_delay_ms(30);       //for debouncing
				if (u8Value == KEYPAD_BUTTON_PRESSED)
				{
					while (u8Value == KEYPAD_BUTTON_PRESSED)
     992:	88 23       	and	r24, r24
     994:	d1 f3       	breq	.-12     	; 0x98a <KEYPAD_u8GetPressedKey+0x96>
					{
						u8Value = GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RowPinArr[u8RowLocal]);
					}
					u8 KPD_u8Value[KEYPAD_NUM_ROWS][KEYPAD_NUM_COLS] = KEYPAD_VALUES;
     996:	80 e1       	ldi	r24, 0x10	; 16
     998:	e5 e6       	ldi	r30, 0x65	; 101
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	de 01       	movw	r26, r28
     99e:	19 96       	adiw	r26, 0x09	; 9
     9a0:	01 90       	ld	r0, Z+
     9a2:	0d 92       	st	X+, r0
     9a4:	8a 95       	dec	r24
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <KEYPAD_u8GetPressedKey+0xac>
					return KPD_u8Value[u8RowLocal][u8ColLocal];
     9a8:	ee 0c       	add	r14, r14
     9aa:	ff 1c       	adc	r15, r15
     9ac:	ee 0c       	add	r14, r14
     9ae:	ff 1c       	adc	r15, r15
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	8c 0f       	add	r24, r28
     9b6:	9d 1f       	adc	r25, r29
     9b8:	e8 0e       	add	r14, r24
     9ba:	f9 1e       	adc	r15, r25
     9bc:	f7 01       	movw	r30, r14
     9be:	ec 0d       	add	r30, r12
     9c0:	fd 1d       	adc	r31, r13
     9c2:	80 85       	ldd	r24, Z+8	; 0x08
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <KEYPAD_u8GetPressedKey+0xee>
	
	
	for (u8ColLocal=0; u8ColLocal<KEYPAD_NUM_COLS; u8ColLocal++)
	{
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
		for (u8RowLocal=0; u8RowLocal<KEYPAD_NUM_ROWS; u8RowLocal++)
     9c6:	1f 5f       	subi	r17, 0xFF	; 255
     9c8:	14 30       	cpi	r17, 0x04	; 4
     9ca:	38 f2       	brcs	.-114    	; 0x95a <KEYPAD_u8GetPressedKey+0x66>
			} 
			else
			{
			}
		}
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	6a 2d       	mov	r22, r10
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
	u8 KPD_u8RowPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	
	
	for (u8ColLocal=0; u8ColLocal<KEYPAD_NUM_COLS; u8ColLocal++)
     9d6:	b3 94       	inc	r11
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	9b 15       	cp	r25, r11
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <KEYPAD_u8GetPressedKey+0xec>
     9de:	ad cf       	rjmp	.-166    	; 0x93a <KEYPAD_u8GetPressedKey+0x46>
			}
		}
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
	}
	
	return KEYPAD_BUTTON_RELEASED;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
		
}
     9e2:	68 96       	adiw	r28, 0x18	; 24
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret

00000a04 <itoa>:
#include "../MCAL/gpio.h"
#include "../LIB/common_macros.h"
#include "../LIB/std_types.h"


u8* itoa(s32 num, u8* str, s32 base) {
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2a 97       	sbiw	r28, 0x0a	; 10
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	4b 01       	movw	r8, r22
     a3a:	5c 01       	movw	r10, r24
     a3c:	1a 01       	movw	r2, r20
     a3e:	09 83       	std	Y+1, r16	; 0x01
     a40:	1a 83       	std	Y+2, r17	; 0x02
     a42:	2b 83       	std	Y+3, r18	; 0x03
     a44:	3c 83       	std	Y+4, r19	; 0x04
	s32 i = 0;
	s32 isNegative = 0;

	// Handle 0 explicitly
	if (num == 0) {
     a46:	61 15       	cp	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	81 05       	cpc	r24, r1
     a4c:	91 05       	cpc	r25, r1
     a4e:	31 f4       	brne	.+12     	; 0xa5c <itoa+0x58>
		str[i++] = '0';
     a50:	80 e3       	ldi	r24, 0x30	; 48
     a52:	da 01       	movw	r26, r20
     a54:	8c 93       	st	X, r24
		str[i] = '\0';
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	1c 92       	st	X, r1
		return str;
     a5a:	8e c0       	rjmp	.+284    	; 0xb78 <itoa+0x174>
	}

	// Handle negative numbers
	if (num < 0 && base == 10) {
     a5c:	99 23       	and	r25, r25
     a5e:	cc f4       	brge	.+50     	; 0xa92 <itoa+0x8e>
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	ab 81       	ldd	r26, Y+3	; 0x03
     a66:	bc 81       	ldd	r27, Y+4	; 0x04
     a68:	0a 97       	sbiw	r24, 0x0a	; 10
     a6a:	a1 05       	cpc	r26, r1
     a6c:	b1 05       	cpc	r27, r1
     a6e:	b1 f4       	brne	.+44     	; 0xa9c <itoa+0x98>
		isNegative = 1;
		num = -num;
     a70:	b0 94       	com	r11
     a72:	a0 94       	com	r10
     a74:	90 94       	com	r9
     a76:	80 94       	com	r8
     a78:	81 1c       	adc	r8, r1
     a7a:	91 1c       	adc	r9, r1
     a7c:	a1 1c       	adc	r10, r1
     a7e:	b1 1c       	adc	r11, r1
		return str;
	}

	// Handle negative numbers
	if (num < 0 && base == 10) {
		isNegative = 1;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	8d 83       	std	Y+5, r24	; 0x05
     a8a:	9e 83       	std	Y+6, r25	; 0x06
     a8c:	af 83       	std	Y+7, r26	; 0x07
     a8e:	b8 87       	std	Y+8, r27	; 0x08
     a90:	09 c0       	rjmp	.+18     	; 0xaa4 <itoa+0xa0>
#include "../LIB/std_types.h"


u8* itoa(s32 num, u8* str, s32 base) {
	s32 i = 0;
	s32 isNegative = 0;
     a92:	1d 82       	std	Y+5, r1	; 0x05
     a94:	1e 82       	std	Y+6, r1	; 0x06
     a96:	1f 82       	std	Y+7, r1	; 0x07
     a98:	18 86       	std	Y+8, r1	; 0x08
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <itoa+0xa0>
     a9c:	1d 82       	std	Y+5, r1	; 0x05
     a9e:	1e 82       	std	Y+6, r1	; 0x06
     aa0:	1f 82       	std	Y+7, r1	; 0x07
     aa2:	18 86       	std	Y+8, r1	; 0x08
     aa4:	c1 2c       	mov	r12, r1
     aa6:	d1 2c       	mov	r13, r1
     aa8:	76 01       	movw	r14, r12
     aaa:	27 c0       	rjmp	.+78     	; 0xafa <itoa+0xf6>
		num = -num;
	}

	// Convert the number to string in reverse order
	while (num != 0) {
		s32 rem = num % base;
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divmodsi4>
		str[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
     abc:	26 01       	movw	r4, r12
     abe:	37 01       	movw	r6, r14
     ac0:	af ef       	ldi	r26, 0xFF	; 255
     ac2:	4a 1a       	sub	r4, r26
     ac4:	5a 0a       	sbc	r5, r26
     ac6:	6a 0a       	sbc	r6, r26
     ac8:	7a 0a       	sbc	r7, r26
     aca:	f1 01       	movw	r30, r2
     acc:	ec 0d       	add	r30, r12
     ace:	fd 1d       	adc	r31, r13
     ad0:	6a 30       	cpi	r22, 0x0A	; 10
     ad2:	71 05       	cpc	r23, r1
     ad4:	81 05       	cpc	r24, r1
     ad6:	91 05       	cpc	r25, r1
     ad8:	14 f0       	brlt	.+4      	; 0xade <itoa+0xda>
     ada:	69 5c       	subi	r22, 0xC9	; 201
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <itoa+0xdc>
     ade:	60 5d       	subi	r22, 0xD0	; 208
     ae0:	60 83       	st	Z, r22
		num = num / base;
     ae2:	c5 01       	movw	r24, r10
     ae4:	b4 01       	movw	r22, r8
     ae6:	29 81       	ldd	r18, Y+1	; 0x01
     ae8:	3a 81       	ldd	r19, Y+2	; 0x02
     aea:	4b 81       	ldd	r20, Y+3	; 0x03
     aec:	5c 81       	ldd	r21, Y+4	; 0x04
     aee:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divmodsi4>
     af2:	49 01       	movw	r8, r18
     af4:	5a 01       	movw	r10, r20
	}

	// Convert the number to string in reverse order
	while (num != 0) {
		s32 rem = num % base;
		str[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
     af6:	73 01       	movw	r14, r6
     af8:	62 01       	movw	r12, r4
		isNegative = 1;
		num = -num;
	}

	// Convert the number to string in reverse order
	while (num != 0) {
     afa:	81 14       	cp	r8, r1
     afc:	91 04       	cpc	r9, r1
     afe:	a1 04       	cpc	r10, r1
     b00:	b1 04       	cpc	r11, r1
     b02:	a1 f6       	brne	.-88     	; 0xaac <itoa+0xa8>
		str[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
		num = num / base;
	}

	// If the number is negative, append '-'
	if (isNegative)
     b04:	8d 81       	ldd	r24, Y+5	; 0x05
     b06:	9e 81       	ldd	r25, Y+6	; 0x06
     b08:	af 81       	ldd	r26, Y+7	; 0x07
     b0a:	b8 85       	ldd	r27, Y+8	; 0x08
     b0c:	89 2b       	or	r24, r25
     b0e:	8a 2b       	or	r24, r26
     b10:	8b 2b       	or	r24, r27
     b12:	51 f0       	breq	.+20     	; 0xb28 <itoa+0x124>
	str[i++] = '-';
     b14:	f1 01       	movw	r30, r2
     b16:	ec 0d       	add	r30, r12
     b18:	fd 1d       	adc	r31, r13
     b1a:	8d e2       	ldi	r24, 0x2D	; 45
     b1c:	80 83       	st	Z, r24
     b1e:	9f ef       	ldi	r25, 0xFF	; 255
     b20:	c9 1a       	sub	r12, r25
     b22:	d9 0a       	sbc	r13, r25
     b24:	e9 0a       	sbc	r14, r25
     b26:	f9 0a       	sbc	r15, r25

	// Append the null terminator
	str[i] = '\0';
     b28:	f1 01       	movw	r30, r2
     b2a:	ec 0d       	add	r30, r12
     b2c:	fd 1d       	adc	r31, r13
     b2e:	10 82       	st	Z, r1

	// Reverse the string
	s32 start = 0;
	s32 end = i - 1;
     b30:	a1 e0       	ldi	r26, 0x01	; 1
     b32:	ca 1a       	sub	r12, r26
     b34:	d1 08       	sbc	r13, r1
     b36:	e1 08       	sbc	r14, r1
     b38:	f1 08       	sbc	r15, r1

	// Append the null terminator
	str[i] = '\0';

	// Reverse the string
	s32 start = 0;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	dc 01       	movw	r26, r24
	s32 end = i - 1;
	while (start < end) {
     b40:	16 c0       	rjmp	.+44     	; 0xb6e <itoa+0x16a>
		s8 temp = str[start];
     b42:	91 01       	movw	r18, r2
     b44:	28 0f       	add	r18, r24
     b46:	39 1f       	adc	r19, r25
     b48:	f9 01       	movw	r30, r18
     b4a:	40 81       	ld	r20, Z
		str[start] = str[end];
     b4c:	b1 01       	movw	r22, r2
     b4e:	6c 0d       	add	r22, r12
     b50:	7d 1d       	adc	r23, r13
     b52:	fb 01       	movw	r30, r22
     b54:	50 81       	ld	r21, Z
     b56:	f9 01       	movw	r30, r18
     b58:	50 83       	st	Z, r21
		str[end] = temp;
     b5a:	fb 01       	movw	r30, r22
     b5c:	40 83       	st	Z, r20
		start++;
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
		end--;
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	cf 1a       	sub	r12, r31
     b68:	d1 08       	sbc	r13, r1
     b6a:	e1 08       	sbc	r14, r1
     b6c:	f1 08       	sbc	r15, r1
	str[i] = '\0';

	// Reverse the string
	s32 start = 0;
	s32 end = i - 1;
	while (start < end) {
     b6e:	8c 15       	cp	r24, r12
     b70:	9d 05       	cpc	r25, r13
     b72:	ae 05       	cpc	r26, r14
     b74:	bf 05       	cpc	r27, r15
     b76:	2c f3       	brlt	.-54     	; 0xb42 <itoa+0x13e>
		start++;
		end--;
	}

	return str;
}
     b78:	c1 01       	movw	r24, r2
     b7a:	2a 96       	adiw	r28, 0x0a	; 10
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	7f 90       	pop	r7
     ba0:	6f 90       	pop	r6
     ba2:	5f 90       	pop	r5
     ba4:	4f 90       	pop	r4
     ba6:	3f 90       	pop	r3
     ba8:	2f 90       	pop	r2
     baa:	08 95       	ret

00000bac <LCD_voidSendCommand>:
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);               //0b00000001    0x01
}


void LCD_voidSendCommand(u8 u8Command)
{
     bac:	cf 93       	push	r28
     bae:	c8 2f       	mov	r28, r24
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,OUTPUT);
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	66 e0       	ldi	r22, 0x06	; 6
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_RS_PIN,LOGIC_LOW);
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	66 e0       	ldi	r22, 0x06	; 6
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,OUTPUT);
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	65 e0       	ldi	r22, 0x05	; 5
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_RW_PIN,LOGIC_LOW);
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	65 e0       	ldi	r22, 0x05	; 5
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
	GPIO_setupPortDirection(LCD_DATA_PORT,0xFF);
     bd8:	6f ef       	ldi	r22, 0xFF	; 255
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPortDirection>
	GPIO_writePort(LCD_DATA_PORT,u8Command);
     be0:	6c 2f       	mov	r22, r28
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePort>
	
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_E_PIN,OUTPUT);
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_HIGH);
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	64 e0       	ldi	r22, 0x04	; 4
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
     bfc:	8f e9       	ldi	r24, 0x9F	; 159
     bfe:	9f e0       	ldi	r25, 0x0F	; 15
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <LCD_voidSendCommand+0x54>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <LCD_voidSendCommand+0x5a>
     c06:	00 00       	nop
	_delay_ms(2);
	GPIO_writePin(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_LOW);
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
}
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <LCD_voidInit>:
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	99 ef       	ldi	r25, 0xF9	; 249
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <LCD_voidInit+0x4>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <LCD_voidInit+0xa>
     c20:	00 00       	nop


void LCD_voidInit()
{
	_delay_ms(32);
	LCD_voidSendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);   //0b00111000    0x38
     c22:	88 e3       	ldi	r24, 0x38	; 56
     c24:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CURSOR_OFF);                  //0b00001100    0x0C
     c28:	8c e0       	ldi	r24, 0x0C	; 12
     c2a:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);               //0b00000001    0x01
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_voidSendCommand>
     c34:	08 95       	ret

00000c36 <LCD_voidSendData>:
	
}


void LCD_voidSendData(u8 u8Data)
{
     c36:	cf 93       	push	r28
     c38:	c8 2f       	mov	r28, r24
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,OUTPUT);
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	66 e0       	ldi	r22, 0x06	; 6
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_RS_PIN,LOGIC_HIGH);
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	66 e0       	ldi	r22, 0x06	; 6
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,OUTPUT);
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	65 e0       	ldi	r22, 0x05	; 5
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_RW_PIN,LOGIC_LOW);
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	65 e0       	ldi	r22, 0x05	; 5
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	
	GPIO_setupPortDirection(LCD_DATA_PORT,0xFF);
     c62:	6f ef       	ldi	r22, 0xFF	; 255
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPortDirection>
	GPIO_writePort(LCD_DATA_PORT,u8Data);
     c6a:	6c 2f       	mov	r22, r28
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePort>
	
	GPIO_setupPinDirection(LCD_CTRL_PORT,LCD_E_PIN,OUTPUT);
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	64 e0       	ldi	r22, 0x04	; 4
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_HIGH);
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
     c86:	8f e9       	ldi	r24, 0x9F	; 159
     c88:	9f e0       	ldi	r25, 0x0F	; 15
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_voidSendData+0x54>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <LCD_voidSendData+0x5a>
     c90:	00 00       	nop
	_delay_ms(2);
	GPIO_writePin(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_LOW);
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
}
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <LCD_voidSendString>:


void LCD_voidSendString(const u8 *Str)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	8c 01       	movw	r16, r24
	u8 i=0;
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Str[i]);
     cac:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_voidSendData>
		i++;
     cb0:	cf 5f       	subi	r28, 0xFF	; 255


void LCD_voidSendString(const u8 *Str)
{
	u8 i=0;
	while(Str[i] != '\0')
     cb2:	f8 01       	movw	r30, r16
     cb4:	ec 0f       	add	r30, r28
     cb6:	f1 1d       	adc	r31, r1
     cb8:	80 81       	ld	r24, Z
     cba:	81 11       	cpse	r24, r1
     cbc:	f7 cf       	rjmp	.-18     	; 0xcac <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(Str[i]);
		i++;
	}
}
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <LCD_moveCursor>:


void LCD_moveCursor(u8 row,u8 col)
{
	u8 address=LCD_SET_CURSOR_LOCATION;
	switch(row)
     cc6:	88 23       	and	r24, r24
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <LCD_moveCursor+0xa>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	21 f0       	breq	.+8      	; 0xcd6 <LCD_moveCursor+0x10>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <LCD_moveCursor+0x16>
	{
		case 0: address+=col; break;
     cd0:	80 e8       	ldi	r24, 0x80	; 128
     cd2:	86 0f       	add	r24, r22
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <LCD_moveCursor+0x18>
		case 1: address+=col+0x40; break;
     cd6:	80 ec       	ldi	r24, 0xC0	; 192
     cd8:	86 0f       	add	r24, r22
     cda:	01 c0       	rjmp	.+2      	; 0xcde <LCD_moveCursor+0x18>
}


void LCD_moveCursor(u8 row,u8 col)
{
	u8 address=LCD_SET_CURSOR_LOCATION;
     cdc:	80 e8       	ldi	r24, 0x80	; 128
	switch(row)
	{
		case 0: address+=col; break;
		case 1: address+=col+0x40; break;
	}
	LCD_voidSendCommand(address);
     cde:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_voidSendCommand>
     ce2:	08 95       	ret

00000ce4 <LCD_voidIntgerToString>:
}


void LCD_voidIntgerToString(u32 data)
{
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	60 97       	sbiw	r28, 0x10	; 16
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
	u8 buff[16];
	itoa(data,buff,10);
     cfc:	0a e0       	ldi	r16, 0x0A	; 10
     cfe:	10 e0       	ldi	r17, 0x00	; 0
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	ae 01       	movw	r20, r28
     d06:	4f 5f       	subi	r20, 0xFF	; 255
     d08:	5f 4f       	sbci	r21, 0xFF	; 255
     d0a:	0e 94 02 05 	call	0xa04	; 0xa04 <itoa>
	LCD_voidSendString(buff);
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendString>
}
     d16:	60 96       	adiw	r28, 0x10	; 16
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <LCD_voidClearScreen>:


void LCD_voidClearScreen()
{
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_voidSendCommand>
     d32:	08 95       	ret

00000d34 <LED_ON>:
#include "../LIB/std_types.h"
#include "../MCAL/gpio.h"


void LED_ON(u8 port_num, u8 pin_num)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	c8 2f       	mov	r28, r24
     d3a:	d6 2f       	mov	r29, r22
	GPIO_setupPinDirection(port_num, pin_num, OUTPUT);
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, 1);
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	6d 2f       	mov	r22, r29
     d46:	8c 2f       	mov	r24, r28
     d48:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <LED_OFF>:


void LED_OFF(u8 port_num, u8 pin_num)
{
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	c8 2f       	mov	r28, r24
     d58:	d6 2f       	mov	r29, r22
	GPIO_setupPinDirection(port_num, pin_num, OUTPUT);
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, 0);
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	6d 2f       	mov	r22, r29
     d64:	8c 2f       	mov	r24, r28
     d66:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <Read_LM35_f32>:
#include "../MCAL/adc.h"
#include "LM35_driver.h"

f32 Read_LM35_f32(void)
{
	f32 temp = ADC_readChannel(0) * 5.0 / 1023.0;
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 1a 07 	call	0xe34	; 0xe34 <ADC_readChannel>
     d76:	bc 01       	movw	r22, r24
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatunsisf>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 ea       	ldi	r20, 0xA0	; 160
     d86:	50 e4       	ldi	r21, 0x40	; 64
     d88:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 ec       	ldi	r19, 0xC0	; 192
     d90:	4f e7       	ldi	r20, 0x7F	; 127
     d92:	54 e4       	ldi	r21, 0x44	; 68
     d94:	0e 94 06 09 	call	0x120c	; 0x120c <__divsf3>
	return temp*100;
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	48 ec       	ldi	r20, 0xC8	; 200
     d9e:	52 e4       	ldi	r21, 0x42	; 66
     da0:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
}
     da4:	08 95       	ret

00000da6 <motor_init>:
#include <util/delay.h>


void motor_init(void)
{
	GPIO_setupPinDirection(MOTOR_IN_PORT,MOTOR_IN_1,OUTPUT);
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	65 e0       	ldi	r22, 0x05	; 5
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN_PORT,MOTOR_IN_2,OUTPUT);
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	
	PWM_init(MOTOR_EN);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <PWM_init>
     dc0:	08 95       	ret

00000dc2 <motor_start>:
}


void motor_start(void)
{
	PWM_SetDutyCycle(100, MOTOR_EN);
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	84 e6       	ldi	r24, 0x64	; 100
     dc6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_SetDutyCycle>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_1,1);
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	65 e0       	ldi	r22, 0x05	; 5
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_2,0);
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	66 e0       	ldi	r22, 0x06	; 6
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
     dde:	08 95       	ret

00000de0 <motor_stop>:
	
}

void motor_stop(void)
{
	PWM_SetDutyCycle(0, MOTOR_EN);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_SetDutyCycle>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_1,0);
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	65 e0       	ldi	r22, 0x05	; 5
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_2,0);
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	66 e0       	ldi	r22, 0x06	; 6
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
     dfc:	08 95       	ret

00000dfe <motor_set_speed>:
	
}

void motor_set_speed(u8 speed)
{
	PWM_SetDutyCycle(speed,MOTOR_EN);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_SetDutyCycle>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_1,1);
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	65 e0       	ldi	r22, 0x05	; 5
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
	GPIO_writePin(MOTOR_IN_PORT,MOTOR_IN_2,0);
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	66 e0       	ldi	r22, 0x06	; 6
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePin>
     e18:	08 95       	ret

00000e1a <main>:
#include "functions.h"


int main(void)
{
	system_init();	
     e1a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <system_init>
	
    while (1) 
    {
		check_password();
     e1e:	0e 94 95 03 	call	0x72a	; 0x72a <check_password>
		LCD_voidClearScreen();
     e22:	0e 94 96 06 	call	0xd2c	; 0xd2c <LCD_voidClearScreen>
		system_on();
     e26:	0e 94 1d 04 	call	0x83a	; 0x83a <system_on>
     e2a:	f9 cf       	rjmp	.-14     	; 0xe1e <main+0x4>

00000e2c <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     e2c:	17 b8       	out	0x07, r1	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     e2e:	83 e8       	ldi	r24, 0x83	; 131
     e30:	86 b9       	out	0x06, r24	; 6
     e32:	08 95       	ret

00000e34 <ADC_readChannel>:
}

u16 ADC_readChannel(u8 channel_num)
{
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e34:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e36:	97 b1       	in	r25, 0x07	; 7
     e38:	90 7e       	andi	r25, 0xE0	; 224
     e3a:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     e3c:	97 b1       	in	r25, 0x07	; 7
     e3e:	89 2b       	or	r24, r25
     e40:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     e42:	86 b1       	in	r24, 0x06	; 6
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     e48:	34 9b       	sbis	0x06, 4	; 6
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     e4c:	86 b1       	in	r24, 0x06	; 6
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	86 b9       	out	0x06, r24	; 6
     e52:	89 ef       	ldi	r24, 0xF9	; 249
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <ADC_readChannel+0x22>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <ADC_readChannel+0x28>
     e5c:	00 00       	nop
	_delay_ms(1);
	return ADC; /* Read the digital value from the data register */
     e5e:	84 b1       	in	r24, 0x04	; 4
     e60:	95 b1       	in	r25, 0x05	; 5
}
     e62:	08 95       	ret

00000e64 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(u8 port_num, u8 pin_num, u8 direction)
{
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
	switch(port_num)
     e68:	08 2f       	mov	r16, r24
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	f8 01       	movw	r30, r16
     e6e:	e1 54       	subi	r30, 0x41	; 65
     e70:	f1 09       	sbc	r31, r1
     e72:	e4 32       	cpi	r30, 0x24	; 36
     e74:	f1 05       	cpc	r31, r1
     e76:	58 f4       	brcc	.+22     	; 0xe8e <GPIO_setupPinDirection+0x2a>
     e78:	e6 5d       	subi	r30, 0xD6	; 214
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		case 'a':
			port_num = PORTA_ID;
			break;
		case 'B':
		case 'b':
			port_num = PORTB_ID;
     e80:	81 e0       	ldi	r24, 0x01	; 1
			break;
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <GPIO_setupPinDirection+0x2a>
		case 'C':
		case 'c':
			port_num = PORTC_ID;
     e84:	82 e0       	ldi	r24, 0x02	; 2
			break;
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <GPIO_setupPinDirection+0x2a>
		case 'D':
		case 'd':
			port_num = PORTD_ID;
     e88:	83 e0       	ldi	r24, 0x03	; 3
			break;
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <GPIO_setupPinDirection+0x2a>
{
	switch(port_num)
	{
		case 'A':
		case 'a':
			port_num = PORTA_ID;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e8e:	68 30       	cpi	r22, 0x08	; 8
     e90:	08 f0       	brcs	.+2      	; 0xe94 <GPIO_setupPinDirection+0x30>
     e92:	70 c0       	rjmp	.+224    	; 0xf74 <GPIO_setupPinDirection+0x110>
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	08 f0       	brcs	.+2      	; 0xe9a <GPIO_setupPinDirection+0x36>
     e98:	6d c0       	rjmp	.+218    	; 0xf74 <GPIO_setupPinDirection+0x110>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	85 36       	cpi	r24, 0x65	; 101
     e9e:	91 05       	cpc	r25, r1
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <GPIO_setupPinDirection+0x40>
     ea2:	68 c0       	rjmp	.+208    	; 0xf74 <GPIO_setupPinDirection+0x110>
     ea4:	fc 01       	movw	r30, r24
     ea6:	e2 5b       	subi	r30, 0xB2	; 178
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		{
		case PORTA_ID:
		case 'A':
		case 'a':
			if(direction == 1)
     eae:	41 30       	cpi	r20, 0x01	; 1
     eb0:	59 f4       	brne	.+22     	; 0xec8 <GPIO_setupPinDirection+0x64>
			{
				SET_BIT(DDRA,pin_num);
     eb2:	2a b3       	in	r18, 0x1a	; 26
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_setupPinDirection+0x5a>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	6a 95       	dec	r22
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_setupPinDirection+0x56>
     ec2:	82 2b       	or	r24, r18
     ec4:	8a bb       	out	0x1a, r24	; 26
     ec6:	56 c0       	rjmp	.+172    	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ec8:	2a b3       	in	r18, 0x1a	; 26
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x70>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	6a 95       	dec	r22
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x6c>
     ed8:	80 95       	com	r24
     eda:	82 23       	and	r24, r18
     edc:	8a bb       	out	0x1a, r24	; 26
     ede:	4a c0       	rjmp	.+148    	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			break;
		case PORTB_ID:
		case 'B':
		case 'b':
			if(direction == 1)
     ee0:	41 30       	cpi	r20, 0x01	; 1
     ee2:	59 f4       	brne	.+22     	; 0xefa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRB,pin_num);
     ee4:	27 b3       	in	r18, 0x17	; 23
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_setupPinDirection+0x8c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	6a 95       	dec	r22
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_setupPinDirection+0x88>
     ef4:	82 2b       	or	r24, r18
     ef6:	87 bb       	out	0x17, r24	; 23
     ef8:	3d c0       	rjmp	.+122    	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     efa:	27 b3       	in	r18, 0x17	; 23
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_setupPinDirection+0xa2>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	6a 95       	dec	r22
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_setupPinDirection+0x9e>
     f0a:	80 95       	com	r24
     f0c:	82 23       	and	r24, r18
     f0e:	87 bb       	out	0x17, r24	; 23
     f10:	31 c0       	rjmp	.+98     	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			break;
		case PORTC_ID:
		case 'C':
		case 'c':
			if(direction == 1)
     f12:	41 30       	cpi	r20, 0x01	; 1
     f14:	59 f4       	brne	.+22     	; 0xf2c <GPIO_setupPinDirection+0xc8>
			{
				SET_BIT(DDRC,pin_num);
     f16:	24 b3       	in	r18, 0x14	; 20
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <GPIO_setupPinDirection+0xbe>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <GPIO_setupPinDirection+0xba>
     f26:	82 2b       	or	r24, r18
     f28:	84 bb       	out	0x14, r24	; 20
     f2a:	24 c0       	rjmp	.+72     	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f2c:	24 b3       	in	r18, 0x14	; 20
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <GPIO_setupPinDirection+0xd4>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	6a 95       	dec	r22
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <GPIO_setupPinDirection+0xd0>
     f3c:	80 95       	com	r24
     f3e:	82 23       	and	r24, r18
     f40:	84 bb       	out	0x14, r24	; 20
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			break;
		case PORTD_ID:
		case 'D':
		case 'd':
			if(direction == 1)
     f44:	41 30       	cpi	r20, 0x01	; 1
     f46:	59 f4       	brne	.+22     	; 0xf5e <GPIO_setupPinDirection+0xfa>
			{
				SET_BIT(DDRD,pin_num);
     f48:	21 b3       	in	r18, 0x11	; 17
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <GPIO_setupPinDirection+0xf0>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	6a 95       	dec	r22
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <GPIO_setupPinDirection+0xec>
     f58:	82 2b       	or	r24, r18
     f5a:	81 bb       	out	0x11, r24	; 17
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <GPIO_setupPinDirection+0x110>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f5e:	21 b3       	in	r18, 0x11	; 17
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_setupPinDirection+0x106>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	6a 95       	dec	r22
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_setupPinDirection+0x102>
     f6e:	80 95       	com	r24
     f70:	82 23       	and	r24, r18
     f72:	81 bb       	out	0x11, r24	; 17
			}
			break;
		}
	}
}
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	08 95       	ret

00000f7a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(u8 port_num, u8 pin_num, u8 value)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
	switch(port_num)
     f7e:	08 2f       	mov	r16, r24
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	f8 01       	movw	r30, r16
     f84:	e1 54       	subi	r30, 0x41	; 65
     f86:	f1 09       	sbc	r31, r1
     f88:	e4 32       	cpi	r30, 0x24	; 36
     f8a:	f1 05       	cpc	r31, r1
     f8c:	58 f4       	brcc	.+22     	; 0xfa4 <GPIO_writePin+0x2a>
     f8e:	ed 54       	subi	r30, 0x4D	; 77
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		case 'a':
			port_num = PORTA_ID;
			break;
		case 'B':
		case 'b':
			port_num = PORTB_ID;
     f96:	81 e0       	ldi	r24, 0x01	; 1
			break;
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <GPIO_writePin+0x2a>
		case 'C':
		case 'c':
			port_num = PORTC_ID;
     f9a:	82 e0       	ldi	r24, 0x02	; 2
			break;
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <GPIO_writePin+0x2a>
		case 'D':
		case 'd':
			port_num = PORTD_ID;
     f9e:	83 e0       	ldi	r24, 0x03	; 3
			break;
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <GPIO_writePin+0x2a>
{
	switch(port_num)
	{
		case 'A':
		case 'a':
			port_num = PORTA_ID;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fa4:	68 30       	cpi	r22, 0x08	; 8
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <GPIO_writePin+0x30>
     fa8:	70 c0       	rjmp	.+224    	; 0x108a <GPIO_writePin+0x110>
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <GPIO_writePin+0x36>
     fae:	6d c0       	rjmp	.+218    	; 0x108a <GPIO_writePin+0x110>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	85 36       	cpi	r24, 0x65	; 101
     fb4:	91 05       	cpc	r25, r1
     fb6:	08 f0       	brcs	.+2      	; 0xfba <GPIO_writePin+0x40>
     fb8:	68 c0       	rjmp	.+208    	; 0x108a <GPIO_writePin+0x110>
     fba:	fc 01       	movw	r30, r24
     fbc:	e9 52       	subi	r30, 0x29	; 41
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		{
		case PORTA_ID:
		case 'A':
		case 'a':
			if(value == 1)
     fc4:	41 30       	cpi	r20, 0x01	; 1
     fc6:	59 f4       	brne	.+22     	; 0xfde <GPIO_writePin+0x64>
			{
				SET_BIT(PORTA,pin_num);
     fc8:	2b b3       	in	r18, 0x1b	; 27
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <GPIO_writePin+0x5a>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	6a 95       	dec	r22
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <GPIO_writePin+0x56>
     fd8:	82 2b       	or	r24, r18
     fda:	8b bb       	out	0x1b, r24	; 27
     fdc:	56 c0       	rjmp	.+172    	; 0x108a <GPIO_writePin+0x110>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fde:	2b b3       	in	r18, 0x1b	; 27
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_writePin+0x70>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	6a 95       	dec	r22
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_writePin+0x6c>
     fee:	80 95       	com	r24
     ff0:	82 23       	and	r24, r18
     ff2:	8b bb       	out	0x1b, r24	; 27
     ff4:	4a c0       	rjmp	.+148    	; 0x108a <GPIO_writePin+0x110>
			}
			break;
		case PORTB_ID:
		case 'B':
		case 'b':
			if(value == 1)
     ff6:	41 30       	cpi	r20, 0x01	; 1
     ff8:	59 f4       	brne	.+22     	; 0x1010 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTB,pin_num);
     ffa:	28 b3       	in	r18, 0x18	; 24
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <GPIO_writePin+0x8c>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	6a 95       	dec	r22
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <GPIO_writePin+0x88>
    100a:	82 2b       	or	r24, r18
    100c:	88 bb       	out	0x18, r24	; 24
    100e:	3d c0       	rjmp	.+122    	; 0x108a <GPIO_writePin+0x110>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1010:	28 b3       	in	r18, 0x18	; 24
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_writePin+0xa2>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	6a 95       	dec	r22
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <GPIO_writePin+0x9e>
    1020:	80 95       	com	r24
    1022:	82 23       	and	r24, r18
    1024:	88 bb       	out	0x18, r24	; 24
    1026:	31 c0       	rjmp	.+98     	; 0x108a <GPIO_writePin+0x110>
			}
			break;
		case PORTC_ID:
		case 'C':
		case 'c':
			if(value == 1)
    1028:	41 30       	cpi	r20, 0x01	; 1
    102a:	59 f4       	brne	.+22     	; 0x1042 <GPIO_writePin+0xc8>
			{
				SET_BIT(PORTC,pin_num);
    102c:	25 b3       	in	r18, 0x15	; 21
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_writePin+0xbe>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	6a 95       	dec	r22
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_writePin+0xba>
    103c:	82 2b       	or	r24, r18
    103e:	85 bb       	out	0x15, r24	; 21
    1040:	24 c0       	rjmp	.+72     	; 0x108a <GPIO_writePin+0x110>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1042:	25 b3       	in	r18, 0x15	; 21
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0xd4>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	6a 95       	dec	r22
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0xd0>
    1052:	80 95       	com	r24
    1054:	82 23       	and	r24, r18
    1056:	85 bb       	out	0x15, r24	; 21
    1058:	18 c0       	rjmp	.+48     	; 0x108a <GPIO_writePin+0x110>
			}
			break;
		case PORTD_ID:
		case 'D':
		case 'd':
			if(value == 1)
    105a:	41 30       	cpi	r20, 0x01	; 1
    105c:	59 f4       	brne	.+22     	; 0x1074 <GPIO_writePin+0xfa>
			{
				SET_BIT(PORTD,pin_num);
    105e:	22 b3       	in	r18, 0x12	; 18
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_writePin+0xf0>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	6a 95       	dec	r22
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_writePin+0xec>
    106e:	82 2b       	or	r24, r18
    1070:	82 bb       	out	0x12, r24	; 18
    1072:	0b c0       	rjmp	.+22     	; 0x108a <GPIO_writePin+0x110>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1074:	22 b3       	in	r18, 0x12	; 18
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_writePin+0x106>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	6a 95       	dec	r22
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_writePin+0x102>
    1084:	80 95       	com	r24
    1086:	82 23       	and	r24, r18
    1088:	82 bb       	out	0x12, r24	; 18
			}
			break;
		}
	}
}
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 GPIO_readPin(u8 port_num, u8 pin_num)
{
    1090:	26 2f       	mov	r18, r22
	switch(port_num)
    1092:	48 2f       	mov	r20, r24
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	fa 01       	movw	r30, r20
    1098:	e1 54       	subi	r30, 0x41	; 65
    109a:	f1 09       	sbc	r31, r1
    109c:	e4 32       	cpi	r30, 0x24	; 36
    109e:	f1 05       	cpc	r31, r1
    10a0:	58 f4       	brcc	.+22     	; 0x10b8 <GPIO_readPin+0x28>
    10a2:	e4 5c       	subi	r30, 0xC4	; 196
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		case 'a':
			port_num = PORTA_ID;
			break;
		case 'B':
		case 'b':
			port_num = PORTB_ID;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
			break;
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <GPIO_readPin+0x28>
		case 'C':
		case 'c':
			port_num = PORTC_ID;
    10ae:	82 e0       	ldi	r24, 0x02	; 2
			break;
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <GPIO_readPin+0x28>
		case 'D':
		case 'd':
			port_num = PORTD_ID;
    10b2:	83 e0       	ldi	r24, 0x03	; 3
			break;
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <GPIO_readPin+0x28>
{
	switch(port_num)
	{
		case 'A':
		case 'a':
			port_num = PORTA_ID;
    10b6:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10b8:	28 30       	cpi	r18, 0x08	; 8
    10ba:	78 f5       	brcc	.+94     	; 0x111a <GPIO_readPin+0x8a>
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	78 f5       	brcc	.+94     	; 0x111e <GPIO_readPin+0x8e>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	85 36       	cpi	r24, 0x65	; 101
    10c4:	91 05       	cpc	r25, r1
    10c6:	68 f5       	brcc	.+90     	; 0x1122 <GPIO_readPin+0x92>
    10c8:	fc 01       	movw	r30, r24
    10ca:	e0 5a       	subi	r30, 0xA0	; 160
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		{
		case PORTA_ID:
		case 'A':
		case 'a':
			pin_value = READ_BIT(PINA,pin_num);
    10d2:	89 b3       	in	r24, 0x19	; 25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <GPIO_readPin+0x4c>
    10d8:	95 95       	asr	r25
    10da:	87 95       	ror	r24
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <GPIO_readPin+0x48>
    10e0:	81 70       	andi	r24, 0x01	; 1
			break;
    10e2:	08 95       	ret
			
		case PORTB_ID:
		case 'B':
		case 'b':
			pin_value = READ_BIT(PINB,pin_num);
    10e4:	86 b3       	in	r24, 0x16	; 22
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_readPin+0x5e>
    10ea:	95 95       	asr	r25
    10ec:	87 95       	ror	r24
    10ee:	2a 95       	dec	r18
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_readPin+0x5a>
    10f2:	81 70       	andi	r24, 0x01	; 1
			break;
    10f4:	08 95       	ret
			
		case PORTC_ID:
		case 'C':
		case 'c':
			pin_value = READ_BIT(PINC,pin_num);
    10f6:	83 b3       	in	r24, 0x13	; 19
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_readPin+0x70>
    10fc:	95 95       	asr	r25
    10fe:	87 95       	ror	r24
    1100:	2a 95       	dec	r18
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_readPin+0x6c>
    1104:	81 70       	andi	r24, 0x01	; 1
			break;
    1106:	08 95       	ret
			
		case PORTD_ID:
		case 'D':
		case 'd':
			pin_value = READ_BIT(PIND,pin_num);
    1108:	80 b3       	in	r24, 0x10	; 16
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_readPin+0x82>
    110e:	95 95       	asr	r25
    1110:	87 95       	ror	r24
    1112:	2a 95       	dec	r18
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_readPin+0x7e>
    1116:	81 70       	andi	r24, 0x01	; 1
			break;
    1118:	08 95       	ret
		case 'd':
			port_num = PORTD_ID;
			break;
	}
	
	u8 pin_value = 0;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret
    1122:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
    1124:	08 95       	ret

00001126 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(u8 port_num,u8 direction)
{
    1126:	26 2f       	mov	r18, r22
	switch(port_num)
    1128:	48 2f       	mov	r20, r24
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	fa 01       	movw	r30, r20
    112e:	e1 54       	subi	r30, 0x41	; 65
    1130:	f1 09       	sbc	r31, r1
    1132:	e4 32       	cpi	r30, 0x24	; 36
    1134:	f1 05       	cpc	r31, r1
    1136:	58 f4       	brcc	.+22     	; 0x114e <GPIO_setupPortDirection+0x28>
    1138:	eb 53       	subi	r30, 0x3B	; 59
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		case 'a':
			port_num = PORTA_ID;
			break;
		case 'B':
		case 'b':
			port_num = PORTB_ID;
    1140:	81 e0       	ldi	r24, 0x01	; 1
			break;
    1142:	05 c0       	rjmp	.+10     	; 0x114e <GPIO_setupPortDirection+0x28>
		case 'C':
		case 'c':
			port_num = PORTC_ID;
    1144:	82 e0       	ldi	r24, 0x02	; 2
			break;
    1146:	03 c0       	rjmp	.+6      	; 0x114e <GPIO_setupPortDirection+0x28>
		case 'D':
		case 'd':
			port_num = PORTD_ID;
    1148:	83 e0       	ldi	r24, 0x03	; 3
			break;
    114a:	01 c0       	rjmp	.+2      	; 0x114e <GPIO_setupPortDirection+0x28>
{
	switch(port_num)
	{
		case 'A':
		case 'a':
			port_num = PORTA_ID;
    114c:	80 e0       	ldi	r24, 0x00	; 0
	
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	80 f4       	brcc	.+32     	; 0x1172 <GPIO_setupPortDirection+0x4c>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	85 36       	cpi	r24, 0x65	; 101
    1156:	91 05       	cpc	r25, r1
    1158:	60 f4       	brcc	.+24     	; 0x1172 <GPIO_setupPortDirection+0x4c>
    115a:	fc 01       	movw	r30, r24
    115c:	e7 51       	subi	r30, 0x17	; 23
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		{
		case PORTA_ID:
		case 'A':
		case 'a':
			DDRA = direction;
    1164:	2a bb       	out	0x1a, r18	; 26
			break;
    1166:	08 95       	ret
		case PORTB_ID:
		case 'B':
		case 'b':
			DDRB = direction;
    1168:	27 bb       	out	0x17, r18	; 23
			break;
    116a:	08 95       	ret
		case PORTC_ID:
		case 'C':
		case 'c':
			DDRC = direction;
    116c:	24 bb       	out	0x14, r18	; 20
			break;
    116e:	08 95       	ret
		case PORTD_ID:
		case 'D':
		case 'd':
			DDRD = direction;
    1170:	21 bb       	out	0x11, r18	; 17
    1172:	08 95       	ret

00001174 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(u8 port_num, u8 value)
{
    1174:	26 2f       	mov	r18, r22
	switch(port_num)
    1176:	48 2f       	mov	r20, r24
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	fa 01       	movw	r30, r20
    117c:	e1 54       	subi	r30, 0x41	; 65
    117e:	f1 09       	sbc	r31, r1
    1180:	e4 32       	cpi	r30, 0x24	; 36
    1182:	f1 05       	cpc	r31, r1
    1184:	58 f4       	brcc	.+22     	; 0x119c <GPIO_writePort+0x28>
    1186:	e2 5b       	subi	r30, 0xB2	; 178
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		case 'a':
			port_num = PORTA_ID;
			break;
		case 'B':
		case 'b':
			port_num = PORTB_ID;
    118e:	81 e0       	ldi	r24, 0x01	; 1
			break;
    1190:	05 c0       	rjmp	.+10     	; 0x119c <GPIO_writePort+0x28>
		case 'C':
		case 'c':
			port_num = PORTC_ID;
    1192:	82 e0       	ldi	r24, 0x02	; 2
			break;
    1194:	03 c0       	rjmp	.+6      	; 0x119c <GPIO_writePort+0x28>
		case 'D':
		case 'd':
			port_num = PORTD_ID;
    1196:	83 e0       	ldi	r24, 0x03	; 3
			break;
    1198:	01 c0       	rjmp	.+2      	; 0x119c <GPIO_writePort+0x28>
{
	switch(port_num)
	{
		case 'A':
		case 'a':
			port_num = PORTA_ID;
    119a:	80 e0       	ldi	r24, 0x00	; 0
	}
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	80 f4       	brcc	.+32     	; 0x11c0 <GPIO_writePort+0x4c>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	85 36       	cpi	r24, 0x65	; 101
    11a4:	91 05       	cpc	r25, r1
    11a6:	60 f4       	brcc	.+24     	; 0x11c0 <GPIO_writePort+0x4c>
    11a8:	fc 01       	movw	r30, r24
    11aa:	ee 58       	subi	r30, 0x8E	; 142
    11ac:	fd 4f       	sbci	r31, 0xFD	; 253
    11ae:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__tablejump2__>
		{
		case PORTA_ID:
		case 'A':
		case 'a':
			PORTA = value;
    11b2:	2b bb       	out	0x1b, r18	; 27
			break;
    11b4:	08 95       	ret
		case PORTB_ID:
		case 'B':
		case 'b':
			PORTB = value;
    11b6:	28 bb       	out	0x18, r18	; 24
			break;
    11b8:	08 95       	ret
		case PORTC_ID:
		case 'C':
		case 'c':
			PORTC = value;
    11ba:	25 bb       	out	0x15, r18	; 21
			break;
    11bc:	08 95       	ret
		case PORTD_ID:
		case 'D':
		case 'd':
			PORTD = value;
    11be:	22 bb       	out	0x12, r18	; 18
    11c0:	08 95       	ret

000011c2 <PWM_init>:
		  /*Output Compare Register  OCR0
		   * contains an 8-bit value that is continuously compared
		   * with the counter value (TCNT0). A match can be used to
		   * generate an output compare interrupt
		   * */
		  OCR0 = DutyValue;
    11c2:	88 23       	and	r24, r24
    11c4:	51 f0       	breq	.+20     	; 0x11da <PWM_init+0x18>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	79 f4       	brne	.+30     	; 0x11e8 <PWM_init+0x26>
    11ca:	81 b3       	in	r24, 0x11	; 17
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	81 bb       	out	0x11, r24	; 17
    11d0:	15 bc       	out	0x25, r1	; 37
    11d2:	89 e6       	ldi	r24, 0x69	; 105
    11d4:	85 bd       	out	0x25, r24	; 37
    11d6:	14 bc       	out	0x24, r1	; 36
    11d8:	08 95       	ret
    11da:	87 b3       	in	r24, 0x17	; 23
    11dc:	88 60       	ori	r24, 0x08	; 8
    11de:	87 bb       	out	0x17, r24	; 23
    11e0:	13 be       	out	0x33, r1	; 51
    11e2:	89 e6       	ldi	r24, 0x69	; 105
    11e4:	83 bf       	out	0x33, r24	; 51
    11e6:	12 be       	out	0x32, r1	; 50
    11e8:	08 95       	ret

000011ea <PWM_SetDutyCycle>:
* PARAMETER 2 : The number of 8 bit timer. Either Timer 0 or Timer 2.
*
* Return Value: Nothing
******************************************************************************/
void PWM_SetDutyCycle(uint8_t DutyCycle, uint8_t u8TimerNumber)
{
    11ea:	26 2f       	mov	r18, r22
	  uint8_t PWM_actual_Duty ;           //duty cycle is represented by a number from 0->255


	  PWM_actual_Duty = (DutyCycle * TIMER_MAX_VALUE) / DUTY_CYCLE_MAX_VALUE;
    11ec:	3f ef       	ldi	r19, 0xFF	; 255
    11ee:	83 9f       	mul	r24, r19
    11f0:	c0 01       	movw	r24, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	64 e6       	ldi	r22, 0x64	; 100
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__divmodhi4>
	  /*Output Compare Register OCRx
	   * contains an 8-bit value that is continuously compared
	   * with the counter value (TCNTx). A match can be used to
	   * generate an output compare interrupt
	   **/
	  switch(u8TimerNumber)
    11fc:	22 23       	and	r18, r18
    11fe:	21 f0       	breq	.+8      	; 0x1208 <PWM_SetDutyCycle+0x1e>
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	19 f4       	brne	.+6      	; 0x120a <PWM_SetDutyCycle+0x20>
	  {

	  case TIMER_2:
		  OCR2 = PWM_actual_Duty;
    1204:	63 bd       	out	0x23, r22	; 35
		  break;
    1206:	08 95       	ret

	  case TIMER_0:
		  OCR0 = PWM_actual_Duty;
    1208:	6c bf       	out	0x3c, r22	; 60
    120a:	08 95       	ret

0000120c <__divsf3>:
    120c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__divsf3x>
    1210:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    1214:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    1218:	58 f0       	brcs	.+22     	; 0x1230 <__divsf3+0x24>
    121a:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    121e:	40 f0       	brcs	.+16     	; 0x1230 <__divsf3+0x24>
    1220:	29 f4       	brne	.+10     	; 0x122c <__divsf3+0x20>
    1222:	5f 3f       	cpi	r21, 0xFF	; 255
    1224:	29 f0       	breq	.+10     	; 0x1230 <__divsf3+0x24>
    1226:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    122a:	51 11       	cpse	r21, r1
    122c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    1230:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_nan>

00001234 <__divsf3x>:
    1234:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    1238:	68 f3       	brcs	.-38     	; 0x1214 <__divsf3+0x8>

0000123a <__divsf3_pse>:
    123a:	99 23       	and	r25, r25
    123c:	b1 f3       	breq	.-20     	; 0x122a <__divsf3+0x1e>
    123e:	55 23       	and	r21, r21
    1240:	91 f3       	breq	.-28     	; 0x1226 <__divsf3+0x1a>
    1242:	95 1b       	sub	r25, r21
    1244:	55 0b       	sbc	r21, r21
    1246:	bb 27       	eor	r27, r27
    1248:	aa 27       	eor	r26, r26
    124a:	62 17       	cp	r22, r18
    124c:	73 07       	cpc	r23, r19
    124e:	84 07       	cpc	r24, r20
    1250:	38 f0       	brcs	.+14     	; 0x1260 <__divsf3_pse+0x26>
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	44 1f       	adc	r20, r20
    125c:	aa 1f       	adc	r26, r26
    125e:	a9 f3       	breq	.-22     	; 0x124a <__divsf3_pse+0x10>
    1260:	35 d0       	rcall	.+106    	; 0x12cc <__divsf3_pse+0x92>
    1262:	0e 2e       	mov	r0, r30
    1264:	3a f0       	brmi	.+14     	; 0x1274 <__divsf3_pse+0x3a>
    1266:	e0 e8       	ldi	r30, 0x80	; 128
    1268:	32 d0       	rcall	.+100    	; 0x12ce <__divsf3_pse+0x94>
    126a:	91 50       	subi	r25, 0x01	; 1
    126c:	50 40       	sbci	r21, 0x00	; 0
    126e:	e6 95       	lsr	r30
    1270:	00 1c       	adc	r0, r0
    1272:	ca f7       	brpl	.-14     	; 0x1266 <__divsf3_pse+0x2c>
    1274:	2b d0       	rcall	.+86     	; 0x12cc <__divsf3_pse+0x92>
    1276:	fe 2f       	mov	r31, r30
    1278:	29 d0       	rcall	.+82     	; 0x12cc <__divsf3_pse+0x92>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	bb 1f       	adc	r27, r27
    1282:	26 17       	cp	r18, r22
    1284:	37 07       	cpc	r19, r23
    1286:	48 07       	cpc	r20, r24
    1288:	ab 07       	cpc	r26, r27
    128a:	b0 e8       	ldi	r27, 0x80	; 128
    128c:	09 f0       	breq	.+2      	; 0x1290 <__divsf3_pse+0x56>
    128e:	bb 0b       	sbc	r27, r27
    1290:	80 2d       	mov	r24, r0
    1292:	bf 01       	movw	r22, r30
    1294:	ff 27       	eor	r31, r31
    1296:	93 58       	subi	r25, 0x83	; 131
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	3a f0       	brmi	.+14     	; 0x12aa <__divsf3_pse+0x70>
    129c:	9e 3f       	cpi	r25, 0xFE	; 254
    129e:	51 05       	cpc	r21, r1
    12a0:	78 f0       	brcs	.+30     	; 0x12c0 <__divsf3_pse+0x86>
    12a2:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    12a6:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    12aa:	5f 3f       	cpi	r21, 0xFF	; 255
    12ac:	e4 f3       	brlt	.-8      	; 0x12a6 <__divsf3_pse+0x6c>
    12ae:	98 3e       	cpi	r25, 0xE8	; 232
    12b0:	d4 f3       	brlt	.-12     	; 0x12a6 <__divsf3_pse+0x6c>
    12b2:	86 95       	lsr	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	b7 95       	ror	r27
    12ba:	f7 95       	ror	r31
    12bc:	9f 5f       	subi	r25, 0xFF	; 255
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__divsf3_pse+0x78>
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret
    12cc:	e1 e0       	ldi	r30, 0x01	; 1
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	bb 1f       	adc	r27, r27
    12d6:	62 17       	cp	r22, r18
    12d8:	73 07       	cpc	r23, r19
    12da:	84 07       	cpc	r24, r20
    12dc:	ba 07       	cpc	r27, r26
    12de:	20 f0       	brcs	.+8      	; 0x12e8 <__divsf3_pse+0xae>
    12e0:	62 1b       	sub	r22, r18
    12e2:	73 0b       	sbc	r23, r19
    12e4:	84 0b       	sbc	r24, r20
    12e6:	ba 0b       	sbc	r27, r26
    12e8:	ee 1f       	adc	r30, r30
    12ea:	88 f7       	brcc	.-30     	; 0x12ce <__divsf3_pse+0x94>
    12ec:	e0 95       	com	r30
    12ee:	08 95       	ret

000012f0 <__fixunssfsi>:
    12f0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fp_splitA>
    12f4:	88 f0       	brcs	.+34     	; 0x1318 <__fixunssfsi+0x28>
    12f6:	9f 57       	subi	r25, 0x7F	; 127
    12f8:	98 f0       	brcs	.+38     	; 0x1320 <__fixunssfsi+0x30>
    12fa:	b9 2f       	mov	r27, r25
    12fc:	99 27       	eor	r25, r25
    12fe:	b7 51       	subi	r27, 0x17	; 23
    1300:	b0 f0       	brcs	.+44     	; 0x132e <__fixunssfsi+0x3e>
    1302:	e1 f0       	breq	.+56     	; 0x133c <__fixunssfsi+0x4c>
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	1a f0       	brmi	.+6      	; 0x1314 <__fixunssfsi+0x24>
    130e:	ba 95       	dec	r27
    1310:	c9 f7       	brne	.-14     	; 0x1304 <__fixunssfsi+0x14>
    1312:	14 c0       	rjmp	.+40     	; 0x133c <__fixunssfsi+0x4c>
    1314:	b1 30       	cpi	r27, 0x01	; 1
    1316:	91 f0       	breq	.+36     	; 0x133c <__fixunssfsi+0x4c>
    1318:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_zero>
    131c:	b1 e0       	ldi	r27, 0x01	; 1
    131e:	08 95       	ret
    1320:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__fp_zero>
    1324:	67 2f       	mov	r22, r23
    1326:	78 2f       	mov	r23, r24
    1328:	88 27       	eor	r24, r24
    132a:	b8 5f       	subi	r27, 0xF8	; 248
    132c:	39 f0       	breq	.+14     	; 0x133c <__fixunssfsi+0x4c>
    132e:	b9 3f       	cpi	r27, 0xF9	; 249
    1330:	cc f3       	brlt	.-14     	; 0x1324 <__fixunssfsi+0x34>
    1332:	86 95       	lsr	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b3 95       	inc	r27
    133a:	d9 f7       	brne	.-10     	; 0x1332 <__fixunssfsi+0x42>
    133c:	3e f4       	brtc	.+14     	; 0x134c <__fixunssfsi+0x5c>
    133e:	90 95       	com	r25
    1340:	80 95       	com	r24
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	08 95       	ret

0000134e <__floatunsisf>:
    134e:	e8 94       	clt
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <__floatsisf+0x12>

00001352 <__floatsisf>:
    1352:	97 fb       	bst	r25, 7
    1354:	3e f4       	brtc	.+14     	; 0x1364 <__floatsisf+0x12>
    1356:	90 95       	com	r25
    1358:	80 95       	com	r24
    135a:	70 95       	com	r23
    135c:	61 95       	neg	r22
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	99 23       	and	r25, r25
    1366:	a9 f0       	breq	.+42     	; 0x1392 <__floatsisf+0x40>
    1368:	f9 2f       	mov	r31, r25
    136a:	96 e9       	ldi	r25, 0x96	; 150
    136c:	bb 27       	eor	r27, r27
    136e:	93 95       	inc	r25
    1370:	f6 95       	lsr	r31
    1372:	87 95       	ror	r24
    1374:	77 95       	ror	r23
    1376:	67 95       	ror	r22
    1378:	b7 95       	ror	r27
    137a:	f1 11       	cpse	r31, r1
    137c:	f8 cf       	rjmp	.-16     	; 0x136e <__floatsisf+0x1c>
    137e:	fa f4       	brpl	.+62     	; 0x13be <__floatsisf+0x6c>
    1380:	bb 0f       	add	r27, r27
    1382:	11 f4       	brne	.+4      	; 0x1388 <__floatsisf+0x36>
    1384:	60 ff       	sbrs	r22, 0
    1386:	1b c0       	rjmp	.+54     	; 0x13be <__floatsisf+0x6c>
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	16 c0       	rjmp	.+44     	; 0x13be <__floatsisf+0x6c>
    1392:	88 23       	and	r24, r24
    1394:	11 f0       	breq	.+4      	; 0x139a <__floatsisf+0x48>
    1396:	96 e9       	ldi	r25, 0x96	; 150
    1398:	11 c0       	rjmp	.+34     	; 0x13bc <__floatsisf+0x6a>
    139a:	77 23       	and	r23, r23
    139c:	21 f0       	breq	.+8      	; 0x13a6 <__floatsisf+0x54>
    139e:	9e e8       	ldi	r25, 0x8E	; 142
    13a0:	87 2f       	mov	r24, r23
    13a2:	76 2f       	mov	r23, r22
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <__floatsisf+0x5e>
    13a6:	66 23       	and	r22, r22
    13a8:	71 f0       	breq	.+28     	; 0x13c6 <__floatsisf+0x74>
    13aa:	96 e8       	ldi	r25, 0x86	; 134
    13ac:	86 2f       	mov	r24, r22
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	2a f0       	brmi	.+10     	; 0x13be <__floatsisf+0x6c>
    13b4:	9a 95       	dec	r25
    13b6:	66 0f       	add	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	da f7       	brpl	.-10     	; 0x13b4 <__floatsisf+0x62>
    13be:	88 0f       	add	r24, r24
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	97 f9       	bld	r25, 7
    13c6:	08 95       	ret

000013c8 <__fp_inf>:
    13c8:	97 f9       	bld	r25, 7
    13ca:	9f 67       	ori	r25, 0x7F	; 127
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	08 95       	ret

000013d4 <__fp_nan>:
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	80 ec       	ldi	r24, 0xC0	; 192
    13d8:	08 95       	ret

000013da <__fp_pscA>:
    13da:	00 24       	eor	r0, r0
    13dc:	0a 94       	dec	r0
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	09 06       	cpc	r0, r25
    13e6:	08 95       	ret

000013e8 <__fp_pscB>:
    13e8:	00 24       	eor	r0, r0
    13ea:	0a 94       	dec	r0
    13ec:	12 16       	cp	r1, r18
    13ee:	13 06       	cpc	r1, r19
    13f0:	14 06       	cpc	r1, r20
    13f2:	05 06       	cpc	r0, r21
    13f4:	08 95       	ret

000013f6 <__fp_round>:
    13f6:	09 2e       	mov	r0, r25
    13f8:	03 94       	inc	r0
    13fa:	00 0c       	add	r0, r0
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0xc>
    13fe:	88 23       	and	r24, r24
    1400:	52 f0       	brmi	.+20     	; 0x1416 <__fp_round+0x20>
    1402:	bb 0f       	add	r27, r27
    1404:	40 f4       	brcc	.+16     	; 0x1416 <__fp_round+0x20>
    1406:	bf 2b       	or	r27, r31
    1408:	11 f4       	brne	.+4      	; 0x140e <__fp_round+0x18>
    140a:	60 ff       	sbrs	r22, 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__fp_round+0x20>
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__fp_split3>:
    1418:	57 fd       	sbrc	r21, 7
    141a:	90 58       	subi	r25, 0x80	; 128
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	59 f0       	breq	.+22     	; 0x1438 <__fp_splitA+0x10>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	71 f0       	breq	.+28     	; 0x1442 <__fp_splitA+0x1a>
    1426:	47 95       	ror	r20

00001428 <__fp_splitA>:
    1428:	88 0f       	add	r24, r24
    142a:	97 fb       	bst	r25, 7
    142c:	99 1f       	adc	r25, r25
    142e:	61 f0       	breq	.+24     	; 0x1448 <__fp_splitA+0x20>
    1430:	9f 3f       	cpi	r25, 0xFF	; 255
    1432:	79 f0       	breq	.+30     	; 0x1452 <__fp_splitA+0x2a>
    1434:	87 95       	ror	r24
    1436:	08 95       	ret
    1438:	12 16       	cp	r1, r18
    143a:	13 06       	cpc	r1, r19
    143c:	14 06       	cpc	r1, r20
    143e:	55 1f       	adc	r21, r21
    1440:	f2 cf       	rjmp	.-28     	; 0x1426 <__fp_split3+0xe>
    1442:	46 95       	lsr	r20
    1444:	f1 df       	rcall	.-30     	; 0x1428 <__fp_splitA>
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <__fp_splitA+0x30>
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	18 06       	cpc	r1, r24
    144e:	99 1f       	adc	r25, r25
    1450:	f1 cf       	rjmp	.-30     	; 0x1434 <__fp_splitA+0xc>
    1452:	86 95       	lsr	r24
    1454:	71 05       	cpc	r23, r1
    1456:	61 05       	cpc	r22, r1
    1458:	08 94       	sec
    145a:	08 95       	ret

0000145c <__fp_zero>:
    145c:	e8 94       	clt

0000145e <__fp_szero>:
    145e:	bb 27       	eor	r27, r27
    1460:	66 27       	eor	r22, r22
    1462:	77 27       	eor	r23, r23
    1464:	cb 01       	movw	r24, r22
    1466:	97 f9       	bld	r25, 7
    1468:	08 95       	ret

0000146a <__mulsf3>:
    146a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3x>
    146e:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    1472:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    1476:	38 f0       	brcs	.+14     	; 0x1486 <__mulsf3+0x1c>
    1478:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    147c:	20 f0       	brcs	.+8      	; 0x1486 <__mulsf3+0x1c>
    147e:	95 23       	and	r25, r21
    1480:	11 f0       	breq	.+4      	; 0x1486 <__mulsf3+0x1c>
    1482:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    1486:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_nan>
    148a:	11 24       	eor	r1, r1
    148c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>

00001490 <__mulsf3x>:
    1490:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_split3>
    1494:	70 f3       	brcs	.-36     	; 0x1472 <__mulsf3+0x8>

00001496 <__mulsf3_pse>:
    1496:	95 9f       	mul	r25, r21
    1498:	c1 f3       	breq	.-16     	; 0x148a <__mulsf3+0x20>
    149a:	95 0f       	add	r25, r21
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	55 1f       	adc	r21, r21
    14a0:	62 9f       	mul	r22, r18
    14a2:	f0 01       	movw	r30, r0
    14a4:	72 9f       	mul	r23, r18
    14a6:	bb 27       	eor	r27, r27
    14a8:	f0 0d       	add	r31, r0
    14aa:	b1 1d       	adc	r27, r1
    14ac:	63 9f       	mul	r22, r19
    14ae:	aa 27       	eor	r26, r26
    14b0:	f0 0d       	add	r31, r0
    14b2:	b1 1d       	adc	r27, r1
    14b4:	aa 1f       	adc	r26, r26
    14b6:	64 9f       	mul	r22, r20
    14b8:	66 27       	eor	r22, r22
    14ba:	b0 0d       	add	r27, r0
    14bc:	a1 1d       	adc	r26, r1
    14be:	66 1f       	adc	r22, r22
    14c0:	82 9f       	mul	r24, r18
    14c2:	22 27       	eor	r18, r18
    14c4:	b0 0d       	add	r27, r0
    14c6:	a1 1d       	adc	r26, r1
    14c8:	62 1f       	adc	r22, r18
    14ca:	73 9f       	mul	r23, r19
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	62 1f       	adc	r22, r18
    14d2:	83 9f       	mul	r24, r19
    14d4:	a0 0d       	add	r26, r0
    14d6:	61 1d       	adc	r22, r1
    14d8:	22 1f       	adc	r18, r18
    14da:	74 9f       	mul	r23, r20
    14dc:	33 27       	eor	r19, r19
    14de:	a0 0d       	add	r26, r0
    14e0:	61 1d       	adc	r22, r1
    14e2:	23 1f       	adc	r18, r19
    14e4:	84 9f       	mul	r24, r20
    14e6:	60 0d       	add	r22, r0
    14e8:	21 1d       	adc	r18, r1
    14ea:	82 2f       	mov	r24, r18
    14ec:	76 2f       	mov	r23, r22
    14ee:	6a 2f       	mov	r22, r26
    14f0:	11 24       	eor	r1, r1
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	50 40       	sbci	r21, 0x00	; 0
    14f6:	9a f0       	brmi	.+38     	; 0x151e <__mulsf3_pse+0x88>
    14f8:	f1 f0       	breq	.+60     	; 0x1536 <__mulsf3_pse+0xa0>
    14fa:	88 23       	and	r24, r24
    14fc:	4a f0       	brmi	.+18     	; 0x1510 <__mulsf3_pse+0x7a>
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	bb 1f       	adc	r27, r27
    1504:	66 1f       	adc	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	91 50       	subi	r25, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	a9 f7       	brne	.-22     	; 0x14fa <__mulsf3_pse+0x64>
    1510:	9e 3f       	cpi	r25, 0xFE	; 254
    1512:	51 05       	cpc	r21, r1
    1514:	80 f0       	brcs	.+32     	; 0x1536 <__mulsf3_pse+0xa0>
    1516:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    151a:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_szero>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	e4 f3       	brlt	.-8      	; 0x151a <__mulsf3_pse+0x84>
    1522:	98 3e       	cpi	r25, 0xE8	; 232
    1524:	d4 f3       	brlt	.-12     	; 0x151a <__mulsf3_pse+0x84>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	e7 95       	ror	r30
    1532:	9f 5f       	subi	r25, 0xFF	; 255
    1534:	c1 f7       	brne	.-16     	; 0x1526 <__mulsf3_pse+0x90>
    1536:	fe 2b       	or	r31, r30
    1538:	88 0f       	add	r24, r24
    153a:	91 1d       	adc	r25, r1
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret

00001544 <__divmodhi4>:
    1544:	97 fb       	bst	r25, 7
    1546:	07 2e       	mov	r0, r23
    1548:	16 f4       	brtc	.+4      	; 0x154e <__divmodhi4+0xa>
    154a:	00 94       	com	r0
    154c:	07 d0       	rcall	.+14     	; 0x155c <__divmodhi4_neg1>
    154e:	77 fd       	sbrc	r23, 7
    1550:	09 d0       	rcall	.+18     	; 0x1564 <__divmodhi4_neg2>
    1552:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodhi4>
    1556:	07 fc       	sbrc	r0, 7
    1558:	05 d0       	rcall	.+10     	; 0x1564 <__divmodhi4_neg2>
    155a:	3e f4       	brtc	.+14     	; 0x156a <__divmodhi4_exit>

0000155c <__divmodhi4_neg1>:
    155c:	90 95       	com	r25
    155e:	81 95       	neg	r24
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	08 95       	ret

00001564 <__divmodhi4_neg2>:
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255

0000156a <__divmodhi4_exit>:
    156a:	08 95       	ret

0000156c <__divmodsi4>:
    156c:	05 2e       	mov	r0, r21
    156e:	97 fb       	bst	r25, 7
    1570:	1e f4       	brtc	.+6      	; 0x1578 <__divmodsi4+0xc>
    1572:	00 94       	com	r0
    1574:	0e 94 cd 0a 	call	0x159a	; 0x159a <__negsi2>
    1578:	57 fd       	sbrc	r21, 7
    157a:	07 d0       	rcall	.+14     	; 0x158a <__divmodsi4_neg2>
    157c:	0e 94 ef 0a 	call	0x15de	; 0x15de <__udivmodsi4>
    1580:	07 fc       	sbrc	r0, 7
    1582:	03 d0       	rcall	.+6      	; 0x158a <__divmodsi4_neg2>
    1584:	4e f4       	brtc	.+18     	; 0x1598 <__divmodsi4_exit>
    1586:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__negsi2>

0000158a <__divmodsi4_neg2>:
    158a:	50 95       	com	r21
    158c:	40 95       	com	r20
    158e:	30 95       	com	r19
    1590:	21 95       	neg	r18
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	4f 4f       	sbci	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255

00001598 <__divmodsi4_exit>:
    1598:	08 95       	ret

0000159a <__negsi2>:
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	08 95       	ret

000015aa <__tablejump2__>:
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	05 90       	lpm	r0, Z+
    15b0:	f4 91       	lpm	r31, Z
    15b2:	e0 2d       	mov	r30, r0
    15b4:	09 94       	ijmp

000015b6 <__udivmodhi4>:
    15b6:	aa 1b       	sub	r26, r26
    15b8:	bb 1b       	sub	r27, r27
    15ba:	51 e1       	ldi	r21, 0x11	; 17
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <__udivmodhi4_ep>

000015be <__udivmodhi4_loop>:
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	a6 17       	cp	r26, r22
    15c4:	b7 07       	cpc	r27, r23
    15c6:	10 f0       	brcs	.+4      	; 0x15cc <__udivmodhi4_ep>
    15c8:	a6 1b       	sub	r26, r22
    15ca:	b7 0b       	sbc	r27, r23

000015cc <__udivmodhi4_ep>:
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	5a 95       	dec	r21
    15d2:	a9 f7       	brne	.-22     	; 0x15be <__udivmodhi4_loop>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	08 95       	ret

000015de <__udivmodsi4>:
    15de:	a1 e2       	ldi	r26, 0x21	; 33
    15e0:	1a 2e       	mov	r1, r26
    15e2:	aa 1b       	sub	r26, r26
    15e4:	bb 1b       	sub	r27, r27
    15e6:	fd 01       	movw	r30, r26
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <__udivmodsi4_ep>

000015ea <__udivmodsi4_loop>:
    15ea:	aa 1f       	adc	r26, r26
    15ec:	bb 1f       	adc	r27, r27
    15ee:	ee 1f       	adc	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	a2 17       	cp	r26, r18
    15f4:	b3 07       	cpc	r27, r19
    15f6:	e4 07       	cpc	r30, r20
    15f8:	f5 07       	cpc	r31, r21
    15fa:	20 f0       	brcs	.+8      	; 0x1604 <__udivmodsi4_ep>
    15fc:	a2 1b       	sub	r26, r18
    15fe:	b3 0b       	sbc	r27, r19
    1600:	e4 0b       	sbc	r30, r20
    1602:	f5 0b       	sbc	r31, r21

00001604 <__udivmodsi4_ep>:
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	1a 94       	dec	r1
    160e:	69 f7       	brne	.-38     	; 0x15ea <__udivmodsi4_loop>
    1610:	60 95       	com	r22
    1612:	70 95       	com	r23
    1614:	80 95       	com	r24
    1616:	90 95       	com	r25
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	bd 01       	movw	r22, r26
    161e:	cf 01       	movw	r24, r30
    1620:	08 95       	ret

00001622 <_exit>:
    1622:	f8 94       	cli

00001624 <__stop_program>:
    1624:	ff cf       	rjmp	.-2      	; 0x1624 <__stop_program>
